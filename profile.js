// ===== PROFILE.JS –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====

import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { 
    getDatabase, 
    ref as dbRef, 
    get as dbGet, 
    update as dbUpdate
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

const app = initializeApp(window.firebaseConfig);
const database = getDatabase(app);

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let userBets = [];

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
window.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è profile.js');
    
    try {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ sync manager
        await waitForSyncManager();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await checkAuth();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        await loadProfileData();
        await loadUserBetsHistory();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        setupSyncEventListeners();
        
        console.log('‚úÖ profile.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ profile.js:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
    }
});

// ===== –û–ñ–ò–î–ê–ù–ò–ï SYNC MANAGER =====
async function waitForSyncManager() {
    let attempts = 0;
    const maxAttempts = 50;
    
    while (!window.dataSyncManager && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    if (!window.dataSyncManager) {
        console.warn('‚ö†Ô∏è DataSyncManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return false;
    }
    
    console.log('‚úÖ DataSyncManager –≥–æ—Ç–æ–≤ –¥–ª—è profile.js');
    return true;
}

// ===== –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =====
async function checkAuth() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ sync manager –∏–ª–∏ localStorage
        if (window.dataSyncManager) {
            currentUser = window.dataSyncManager.getCurrentUser();
        }
        
        if (!currentUser) {
            const savedUser = localStorage.getItem('currentUser');
            if (!savedUser) {
                window.location.href = 'login.html';
                return;
            }
            currentUser = JSON.parse(savedUser);
        }
        
        updateUserInfo();
        displayProfileInfo();
        showRoleSpecificLinks();
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ profile.js:', currentUser.username);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        window.location.href = 'login.html';
    }
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–£–®–ê–¢–ï–õ–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function setupSyncEventListeners() {
    if (!window.dataSyncManager) return;
    
    console.log('üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è profile.js');
    
    window.addEventListener('dataSync', (event) => {
        const { type, data } = event.detail;
        console.log(`üì° Profile.js –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ: ${type}`);
        
        switch (type) {
            case 'user_updated':
            case 'user_refreshed':
                handleUserDataUpdate(data);
                break;
                
            case 'connection_restored':
                handleConnectionRestored();
                break;
                
            case 'connection_lost':
                handleConnectionLost();
                break;
        }
    });
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function handleUserDataUpdate(data) {
    if (data.user) {
        const oldUser = { ...currentUser };
        currentUser = data.user;
        
        updateUserInfo();
        displayProfileInfo();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–æ—Ñ–∏–ª—è
        if (data.changes && data.changes.length > 0) {
            data.changes.forEach(change => {
                handleProfileChangeNotification(change, oldUser);
            });
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫
        loadUserBetsHistory();
        
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

function handleProfileChangeNotification(change, oldUser) {
    switch (change.field) {
        case 'role':
            showNotification(`–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${getRoleName(change.newValue)}`, 'info');
            showRoleSpecificLinks(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –º–µ–Ω—é
            break;
            
        case 'betLimit':
            showNotification(`–õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${change.newValue.toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'info');
            break;
            
        case 'status':
            if (change.newValue === 'inactive') {
                showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'error');
            } else if (change.newValue === 'active' && change.oldValue === 'inactive') {
                showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success');
            }
            break;
    }
}

function handleConnectionRestored() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...', 'success');
    loadProfileData();
}

function handleConnectionLost() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.', 'warning');
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê =====
function updateUserInfo() {
    if (!currentUser) return;
    
    const balanceElement = document.getElementById('user-balance');
    const usernameElement = document.getElementById('username');
    
    if (balanceElement) {
        balanceElement.textContent = `${currentUser.balance.toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
        
        // –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        balanceElement.style.transform = 'scale(1.1)';
        balanceElement.style.transition = 'transform 0.2s ease';
        setTimeout(() => {
            balanceElement.style.transform = 'scale(1)';
        }, 200);
    }
    
    if (usernameElement) {
        usernameElement.textContent = currentUser.username;
    }
}

function showRoleSpecificLinks() {
    if (!currentUser) return;
    
    const adminLink = document.getElementById("admin-link");
    const moderatorLink = document.getElementById("moderator-link");
    
    if (adminLink) {
        adminLink.style.display = currentUser.role === "admin" ? "block" : "none";
    }
    
    if (moderatorLink) {
        moderatorLink.style.display = currentUser.role === "moderator" ? "block" : "none";
    }
}

// ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–†–û–§–ò–õ–ï =====
function displayProfileInfo() {
    if (!currentUser) return;
    
    const elements = {
        'profile-username': currentUser.username,
        'profile-role': getRoleName(currentUser.role),
        'profile-balance': `${currentUser.balance.toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`,
        'profile-bet-limit': `${(currentUser.betLimit || 1000).toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`,
        'profile-status': currentUser.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    };
    
    // –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            element.style.opacity = '0.5';
            element.style.transition = 'opacity 0.3s ease';
            
            setTimeout(() => {
                element.textContent = value;
                element.style.opacity = '1';
            }, 150);
        }
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const regElement = document.getElementById('profile-registered');
    if (regElement) {
        if (currentUser.registeredAt) {
            const regDate = new Date(currentUser.registeredAt).toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            regElement.textContent = regDate;
        } else {
            regElement.textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
    const statusElement = document.getElementById('profile-status');
    if (statusElement) {
        statusElement.className = currentUser.status === 'active' ? 'status-active' : 'status-inactive';
    }
}

function getRoleName(role) {
    const roles = {
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };
    return roles[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–û–§–ò–õ–Ø =====
async function loadProfileData() {
    try {
        if (window.dataSyncManager) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
            await window.dataSyncManager.forceRefresh();
            currentUser = window.dataSyncManager.getCurrentUser();
        } else {
            // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase –Ω–∞–ø—Ä—è–º—É—é
            const userRef = dbRef(database, `users/${currentUser.username}`);
            const snapshot = await dbGet(userRef);
            
            if (snapshot.exists()) {
                const userData = snapshot.val();
                currentUser = {
                    username: currentUser.username,
                    ...userData
                };
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
            }
        }
        
        updateUserInfo();
        displayProfileInfo();
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è', 'error');
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –°–¢–ê–í–û–ö =====
async function loadUserBetsHistory() {
    try {
        const betsRef = dbRef(database, 'bets');
        const snapshot = await dbGet(betsRef);
        
        if (snapshot.exists()) {
            const allBets = snapshot.val();
            userBets = Object.entries(allBets)
                .filter(([betId, bet]) => bet.user === currentUser.username)
                .map(([betId, bet]) => ({ id: betId, ...bet }))
                .sort((a, b) => b.timestamp - a.timestamp);
            
            displayProfileStats();
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${userBets.length} —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è`);
        } else {
            userBets = [];
            displayProfileStats();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫:', error);
    }
}

// ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
function displayProfileStats() {
    const statsContainer = document.getElementById('profile-stats');
    if (!statsContainer) return;
    
    const totalBets = userBets.length;
    const wonBets = userBets.filter(bet => bet.status === 'won').length;
    const lostBets = userBets.filter(bet => bet.status === 'lost').length;
    const pendingBets = userBets.filter(bet => bet.status === 'pending').length;
    
    const totalStaked = userBets.reduce((sum, bet) => sum + bet.amount, 0);
    const totalWon = userBets
        .filter(bet => bet.status === 'won')
        .reduce((sum, bet) => sum + (bet.winAmount || bet.amount * bet.coefficient), 0);
    
    const winRate = (wonBets + lostBets) > 0 ? ((wonBets / (wonBets + lostBets)) * 100).toFixed(1) : 0;
    const profit = totalWon - totalStaked;
    const avgBet = totalBets > 0 ? (totalStaked / totalBets).toFixed(0) : 0;
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const bestWin = userBets
        .filter(bet => bet.status === 'won')
        .reduce((max, bet) => Math.max(max, bet.winAmount || bet.amount * bet.coefficient), 0);
    
    const totalCoefficient = userBets
        .reduce((sum, bet) => sum + bet.coefficient, 0);
    const avgCoefficient = totalBets > 0 ? (totalCoefficient / totalBets).toFixed(2) : 0;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statsContainer.style.opacity = '0';
    statsContainer.innerHTML = `
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${totalBets}">0</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${wonBets}">0</div>
            <div class="stat-label">–í—ã–∏–≥—Ä–∞–Ω–æ</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${lostBets}">0</div>
            <div class="stat-label">–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${pendingBets}">0</div>
            <div class="stat-label">–í –æ–∂–∏–¥–∞–Ω–∏–∏</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number ${winRate >= 50 ? 'positive' : 'negative'}" data-target="${winRate}">${winRate}%</div>
            <div class="stat-label">–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number ${profit >= 0 ? 'positive' : 'negative'}" data-target="${profit}">${profit >= 0 ? '+' : ''}${profit}</div>
            <div class="stat-label">–ü—Ä–∏–±—ã–ª—å</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${totalStaked}">${totalStaked.toLocaleString()}</div>
            <div class="stat-label">–í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${avgBet}">${avgBet}</div>
            <div class="stat-label">–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${bestWin}">${bestWin.toLocaleString()}</div>
            <div class="stat-label">–õ—É—á—à–∏–π –≤—ã–∏–≥—Ä—ã—à</div>
        </div>
        <div class="profile-stat-card">
            <div class="stat-number" data-target="${avgCoefficient}">${avgCoefficient}</div>
            <div class="stat-label">–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</div>
        </div>
    `;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —á–∏—Å–µ–ª
    setTimeout(() => {
        statsContainer.style.transition = 'opacity 0.5s ease';
        statsContainer.style.opacity = '1';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —á–∏—Å–µ–ª
        animateCounters();
    }, 100);
}

function animateCounters() {
    const counters = document.querySelectorAll('.stat-number[data-target]');
    
    counters.forEach(counter => {
        const target = parseFloat(counter.getAttribute('data-target'));
        const isPercent = counter.textContent.includes('%');
        const isNegative = target < 0;
        
        let current = 0;
        const increment = target / 50; // 50 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        
        const animate = () => {
            if ((increment > 0 && current < target) || (increment < 0 && current > target)) {
                current += increment;
                
                if (isPercent) {
                    counter.textContent = current.toFixed(1) + '%';
                } else if (target >= 1000) {
                    counter.textContent = (isNegative && current < 0 ? '' : (current > 0 ? '+' : '')) + Math.round(current).toLocaleString();
                } else {
                    counter.textContent = (isNegative && current < 0 ? '' : (current > 0 && !isPercent ? '+' : '')) + current.toFixed(target % 1 === 0 ? 0 : 2);
                }
                
                requestAnimationFrame(animate);
            } else {
                // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if (isPercent) {
                    counter.textContent = target.toFixed(1) + '%';
                } else {
                    counter.textContent = (isNegative && target < 0 ? '' : (target > 0 && !isPercent ? '+' : '')) + 
                                        (target >= 1000 ? target.toLocaleString() : target.toFixed(target % 1 === 0 ? 0 : 2));
                }
            }
        };
        
        // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        setTimeout(animate, Math.random() * 200);
    });
}

// ===== –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–û–õ–Ø =====
async function changePassword() {
    const currentPassword = document.getElementById('currentPassword')?.value?.trim();
    const newPassword = document.getElementById('newPassword')?.value?.trim();
    const confirmPassword = document.getElementById('confirmPassword')?.value?.trim();
    
    if (!currentPassword || !newPassword || !confirmPassword) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (newPassword.length < 4) {
        showNotification('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞', 'error');
        return;
    }
    
    if (newPassword !== confirmPassword) {
        showNotification('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }
    
    if (currentPassword !== currentUser.password) {
        showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const changeBtn = document.querySelector('button[onclick="changePassword()"]');
        const originalText = changeBtn.textContent;
        changeBtn.textContent = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...';
        changeBtn.disabled = true;
        
        if (window.dataSyncManager) {
            // –û–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ sync manager
            await window.dataSyncManager.updateUserData({ password: newPassword });
        } else {
            // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ Firebase
            const userRef = dbRef(database, `users/${currentUser.username}`);
            await dbUpdate(userRef, { password: newPassword });
            
            // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            currentUser.password = newPassword;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
            const element = document.getElementById(id);
            if (element) element.value = '';
        });
        
        showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success');
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        changeBtn.textContent = originalText;
        changeBtn.disabled = false;
        
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ' + error.message, 'error');
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        const changeBtn = document.querySelector('button[onclick="changePassword()"]');
        if (changeBtn) {
            changeBtn.textContent = '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å';
            changeBtn.disabled = false;
        }
    }
}

// ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
window.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.style.display = 'none';
    }
});

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease;
        max-width: 400px;
        word-wrap: break-word;
    `;
    
    // –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    const colors = {
        success: '#4caf50',
        error: '#f44336',
        warning: '#ff9800',
        info: '#2196f3'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideIn 0.3s ease reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 4000);
}

// ===== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ =====
function logout() {
    try {
        // –û—á–∏—Å—Ç–∏—Ç—å sync manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.dataSyncManager) {
            window.dataSyncManager.cleanup();
            window.dataSyncManager.clearLocalData();
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å localStorage
        localStorage.removeItem('currentUser');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
        window.location.href = 'login.html';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
        window.location.href = 'login.html';
    }
}

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====
window.changePassword = changePassword;
window.closeModal = closeModal;
window.logout = logout;
