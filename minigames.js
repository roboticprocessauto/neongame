// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let dataSyncManager = null;
let currentGame = 'blackjack';
let blackjackGame = null;
let rouletteBetType = null;
let rouletteBetNumber = null;

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∏–Ω–∏-–∏–≥—Ä...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = localStorage.getItem('currentUser');
    if (!user) {
        window.location.href = 'login.html';
        return;
    }
    
    try {
        currentUser = JSON.parse(user);
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', currentUser.username);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase –∏ DataSyncManager
        try {
            await initializeFirebase();
            await initializeDataSyncManager();
            console.log('‚úÖ Firebase –∏ DataSyncManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase/DataSyncManager:', error);
            console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUserInfo();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
        const elements = [
            'blackjack-game', 'dice-game', 'roulette-game',
            'player-cards', 'dealer-cards', 'dice-result', 'roulette-result'
        ];
        
        elements.forEach(id => {
            const element = document.getElementById(id);
            console.log(`  ${id}:`, element ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É
        showGame('blackjack');
        
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∏–Ω–∏-–∏–≥—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π:');
        console.log('  showGame:', typeof window.showGame);
        console.log('  startBlackjack:', typeof window.startBlackjack);
        console.log('  playDice:', typeof window.playDice);
        console.log('  selectRouletteBet:', typeof window.selectRouletteBet);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    }
});

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE =====
async function initializeFirebase() {
    if (typeof firebase === 'undefined') {
        throw new Error('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    if (!firebase.apps.length) {
        firebase.initializeApp(firebaseConfig);
    }
    
    console.log('üî• Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DATA SYNC MANAGER =====
async function initializeDataSyncManager() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if (window.dataSyncManager) {
        dataSyncManager = window.dataSyncManager;
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DataSyncManager');
        return;
    }
    
    if (typeof DataSyncManager === 'undefined') {
        throw new Error('DataSyncManager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    let attempts = 0;
    while (!window.dataSyncManager && attempts < 50) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    if (window.dataSyncManager) {
        dataSyncManager = window.dataSyncManager;
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π DataSyncManager');
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        dataSyncManager = new DataSyncManager();
        await dataSyncManager.waitForReady();
        console.log('üîÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π DataSyncManager');
    }
    
    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    window.addEventListener('dataSync', (event) => {
        if (event.detail.type === 'user_updated') {
            currentUser = event.detail.data.user;
            updateUserInfo();
        }
    });
    
    console.log('üîÑ DataSyncManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï UI =====
function updateUserInfo() {
    if (!currentUser) return;
    
    document.getElementById('username').textContent = currentUser.username;
    document.getElementById('user-balance').textContent = `${currentUser.balance || 0} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏
    if (currentUser.role === 'admin') {
        document.getElementById('admin-link').style.display = 'inline-block';
    }
    if (currentUser.role === 'moderator' || currentUser.role === 'admin') {
        document.getElementById('moderator-link').style.display = 'inline-block';
    }
}

// ===== –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ò–ì–† =====
function showGame(gameType) {
    try {
        console.log(`üéÆ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É: ${gameType}`);
        console.log('üìç –§—É–Ω–∫—Ü–∏—è showGame –≤—ã–∑–≤–∞–Ω–∞ –∏–∑:', new Error().stack);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã
        document.querySelectorAll('.game-container').forEach(container => {
            container.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.game-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
        const gameContainer = document.getElementById(`${gameType}-game`);
        console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${gameType}-game`, gameContainer);
        if (gameContainer) {
            gameContainer.classList.add('active');
            console.log(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${gameType}-game –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        } else {
            console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã ${gameType}-game –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ gameType
        const tabButton = document.querySelector(`[onclick*="${gameType}"]`);
        console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è: ${gameType}`, tabButton);
        if (tabButton) {
            tabButton.classList.add('active');
            console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–ª—è ${gameType} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
        } else {
            console.warn(`‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–≥—Ä—ã ${gameType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        
        currentGame = gameType;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        resetGameState();
        
        console.log(`‚úÖ –ò–≥—Ä–∞ ${gameType} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showGame:', error);
    }
}

// ===== –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´ =====
function resetGameState() {
    try {
        // –°–±—Ä–æ—Å 21 –æ—á–∫–∞
        if (blackjackGame) {
            blackjackGame = null;
            const playerCards = document.getElementById('player-cards');
            const dealerCards = document.getElementById('dealer-cards');
            const playerScore = document.getElementById('player-score');
            const dealerScore = document.getElementById('dealer-score');
            const blackjackActions = document.getElementById('blackjack-actions');
            const blackjackResult = document.getElementById('blackjack-result');
            
            if (playerCards) playerCards.innerHTML = '';
            if (dealerCards) dealerCards.innerHTML = '';
            if (playerScore) playerScore.textContent = '–û—á–∫–∏: 0';
            if (dealerScore) dealerScore.textContent = '–û—á–∫–∏: 0';
            if (blackjackActions) blackjackActions.style.display = 'none';
            if (blackjackResult) blackjackResult.innerHTML = '';
        }
        
        // –°–±—Ä–æ—Å –∫–æ—Å—Ç–µ–π
        const diceResult = document.getElementById('dice-result');
        const diceResultText = document.getElementById('dice-result-text');
        if (diceResult) diceResult.textContent = '?';
        if (diceResultText) diceResultText.innerHTML = '';
        
        // –°–±—Ä–æ—Å —Ä—É–ª–µ—Ç–∫–∏
        const rouletteResult = document.getElementById('roulette-result');
        const rouletteResultText = document.getElementById('roulette-result-text');
        const selectedBet = document.getElementById('selected-bet');
        const spinBtn = document.getElementById('spin-btn');
        
        if (rouletteResult) rouletteResult.textContent = '?';
        if (rouletteResultText) rouletteResultText.innerHTML = '';
        rouletteBetType = null;
        rouletteBetNumber = null;
        if (selectedBet) selectedBet.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏';
        if (spinBtn) spinBtn.disabled = true;
        
        // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤ —Ä—É–ª–µ—Ç–∫–µ
        document.querySelectorAll('.bet-type-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ resetGameState:', error);
    }
}

// ===== –ò–ì–†–ê 21 –û–ß–ö–û =====
class BlackjackGame {
    constructor(bet) {
        this.bet = bet;
        this.deck = this.createDeck();
        this.playerCards = [];
        this.dealerCards = [];
        this.gameOver = false;
    }
    
    createDeck() {
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
        const deck = [];
        
        for (let suit of suits) {
            for (let value of values) {
                deck.push({ suit, value });
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        for (let i = deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deck[i], deck[j]] = [deck[j], deck[i]];
        }
        
        return deck;
    }
    
    dealCard() {
        return this.deck.pop();
    }
    
    calculateScore(cards) {
        let score = 0;
        let aces = 0;
        
        for (let card of cards) {
            if (card.value === 'A') {
                aces++;
                score += 11;
            } else if (['K', 'Q', 'J'].includes(card.value)) {
                score += 10;
            } else {
                score += parseInt(card.value);
            }
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç—É–∑—ã
        while (score > 21 && aces > 0) {
            score -= 10;
            aces--;
        }
        
        return score;
    }
    
    start() {
        // –†–∞–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        this.playerCards.push(this.dealCard());
        this.dealerCards.push(this.dealCard());
        this.playerCards.push(this.dealCard());
        this.dealerCards.push(this.dealCard());
        
        this.updateDisplay();
    }
    
    hit() {
        if (this.gameOver) return;
        
        this.playerCards.push(this.dealCard());
        const playerScore = this.calculateScore(this.playerCards);
        
        if (playerScore > 21) {
            this.endGame('bust');
        }
        
        this.updateDisplay();
    }
    
    stand() {
        if (this.gameOver) return;
        
        this.gameOver = true;
        
        // –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
        while (this.calculateScore(this.dealerCards) < 17) {
            this.dealerCards.push(this.dealCard());
        }
        
        this.determineWinner();
    }
    
    determineWinner() {
        const playerScore = this.calculateScore(this.playerCards);
        const dealerScore = this.calculateScore(this.dealerCards);
        
        let result;
        if (playerScore > 21) {
            result = 'bust';
        } else if (dealerScore > 21) {
            result = 'win';
        } else if (playerScore > dealerScore) {
            result = 'win';
        } else if (playerScore < dealerScore) {
            result = 'lose';
        } else {
            result = 'draw';
        }
        
        this.endGame(result);
    }
    
    endGame(result) {
        this.gameOver = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        this.updateDisplay(true);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let message, isWin;
        switch (result) {
            case 'win':
                message = `–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${this.bet * 2} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`;
                isWin = true;
                this.updateBalance(this.bet * 2);
                break;
            case 'lose':
                message = `–ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${this.bet} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤.`;
                isWin = false;
                this.updateBalance(-this.bet);
                break;
            case 'bust':
                message = `–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${this.bet} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤.`;
                isWin = false;
                this.updateBalance(-this.bet);
                break;
            case 'draw':
                message = `–ù–∏—á—å—è! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.`;
                isWin = false;
                break;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultElement = document.getElementById('blackjack-result');
        resultElement.textContent = message;
        resultElement.className = `game-result ${isWin ? 'win' : 'lose'}`;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.getElementById('blackjack-actions').style.display = 'none';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        setTimeout(() => {
            const newGameBtn = document.createElement('button');
            newGameBtn.className = 'btn';
            newGameBtn.textContent = '–ù–æ–≤–∞—è –∏–≥—Ä–∞';
            newGameBtn.onclick = () => {
                resetGameState();
                document.getElementById('blackjack-actions').style.display = 'none';
            };
            resultElement.appendChild(document.createElement('br'));
            resultElement.appendChild(newGameBtn);
        }, 1000);
    }
    
    updateDisplay(showAllDealerCards = false) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        const playerCardsContainer = document.getElementById('player-cards');
        playerCardsContainer.innerHTML = '';
        
        for (let card of this.playerCards) {
            const cardElement = document.createElement('div');
            cardElement.className = `card ${['‚ô•', '‚ô¶'].includes(card.suit) ? 'red' : ''}`;
            cardElement.textContent = `${card.value}${card.suit}`;
            playerCardsContainer.appendChild(cardElement);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞
        const dealerCardsContainer = document.getElementById('dealer-cards');
        dealerCardsContainer.innerHTML = '';
        
        for (let i = 0; i < this.dealerCards.length; i++) {
            const card = this.dealerCards[i];
            const cardElement = document.createElement('div');
            cardElement.className = `card ${['‚ô•', '‚ô¶'].includes(card.suit) ? 'red' : ''}`;
            
            if (i === 1 && !showAllDealerCards && !this.gameOver) {
                cardElement.textContent = '?';
                cardElement.style.background = '#333';
                cardElement.style.color = '#fff';
            } else {
                cardElement.textContent = `${card.value}${card.suit}`;
            }
            
            dealerCardsContainer.appendChild(cardElement);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
        document.getElementById('player-score').textContent = `–û—á–∫–∏: ${this.calculateScore(this.playerCards)}`;
        
        if (showAllDealerCards || this.gameOver) {
            document.getElementById('dealer-score').textContent = `–û—á–∫–∏: ${this.calculateScore(this.dealerCards)}`;
        } else {
            document.getElementById('dealer-score').textContent = `–û—á–∫–∏: ${this.calculateScore([this.dealerCards[0]])}`;
        }
    }
    
    updateBalance(amount) {
        if (!currentUser) return;
        
        const newBalance = (currentUser.balance || 0) + amount;
        currentUser.balance = newBalance;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ DataSyncManager, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (dataSyncManager && typeof dataSyncManager.updateUserBalance === 'function') {
            try {
                dataSyncManager.updateUserBalance(newBalance);
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ DataSyncManager:', error);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUserInfo();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = amount > 0 ? 
            `–í—ã–∏–≥—Ä—ã—à: +${amount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!` : 
            `–ü—Ä–æ–∏–≥—Ä—ã—à: ${amount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
        showNotification(message, amount > 0 ? 'success' : 'error');
    }
}

function startBlackjack() {
    try {
        const betInput = document.getElementById('blackjack-bet');
        if (!betInput) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç blackjack-bet –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const bet = parseInt(betInput.value);
        
        if (!bet || bet < 1) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É', 'error');
            return;
        }
        
        if (!currentUser || (currentUser.balance || 0) < bet) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–ø–∞–Ω—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        blackjackGame = new BlackjackGame(bet);
        blackjackGame.start();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const actionsElement = document.getElementById('blackjack-actions');
        if (actionsElement) {
            actionsElement.style.display = 'flex';
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultElement = document.getElementById('blackjack-result');
        if (resultElement) {
            resultElement.innerHTML = '';
        }
        
        console.log('‚úÖ –ò–≥—Ä–∞ 21 –æ—á–∫–æ –Ω–∞—á–∞—Ç–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ startBlackjack:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã', 'error');
    }
}

function hitCard() {
    try {
        if (blackjackGame) {
            blackjackGame.hit();
        } else {
            showNotification('–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ hitCard:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∫–∞—Ä—Ç—ã', 'error');
    }
}

function standGame() {
    try {
        if (blackjackGame) {
            blackjackGame.stand();
        } else {
            showNotification('–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞', 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ standGame:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã', 'error');
    }
}

// ===== –ò–ì–†–ê –ö–û–°–¢–ò =====
function playDice() {
    try {
        const betInput = document.getElementById('dice-bet');
        const guessInput = document.getElementById('dice-guess');
        
        if (!betInput || !guessInput) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã dice-bet –∏–ª–∏ dice-guess –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const bet = parseInt(betInput.value);
        const guess = parseInt(guessInput.value);
        
        if (!bet || bet < 1) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É', 'error');
            return;
        }
        
        if (!guess || guess < 1 || guess > 6) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6', 'error');
            return;
        }
        
        if (!currentUser || (currentUser.balance || 0) < bet) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–ø–∞–Ω—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }
        
        // –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏
        const diceResult = Math.floor(Math.random() * 6) + 1;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const diceElement = document.getElementById('dice-result');
        if (diceElement) {
            diceElement.textContent = diceResult;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const isWin = diceResult === guess;
        const winAmount = isWin ? bet * 5 : 0;
        const loseAmount = isWin ? 0 : bet;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if (currentUser) {
            const newBalance = (currentUser.balance || 0) + winAmount - loseAmount;
            currentUser.balance = newBalance;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ DataSyncManager, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if (dataSyncManager && typeof dataSyncManager.updateUserBalance === 'function') {
                try {
                    dataSyncManager.updateUserBalance(newBalance);
                } catch (error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ DataSyncManager:', error);
                }
            }
            
            updateUserInfo();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultElement = document.getElementById('dice-result-text');
        if (resultElement) {
            let message;
            if (isWin) {
                message = `–ü–æ–±–µ–¥–∞! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${diceResult}! –í—ã–∏–≥—Ä—ã—à: ${winAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`;
                resultElement.className = 'game-result win';
                showNotification(`–í—ã–∏–≥—Ä—ã—à: +${winAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`, 'success');
            } else {
                message = `–ù–µ —É–≥–∞–¥–∞–ª–∏! –í—ã–ø–∞–ª–æ ${diceResult}, –∞ –≤—ã –∑–∞–≥–∞–¥–∞–ª–∏ ${guess}. –ü—Ä–æ–∏–≥—Ä—ã—à: ${loseAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤.`;
                resultElement.className = 'game-result lose';
                showNotification(`–ü—Ä–æ–∏–≥—Ä—ã—à: ${loseAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'error');
            }
            resultElement.textContent = message;
        }
        
        console.log('‚úÖ –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ playDice:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ –∫–æ—Å—Ç–∏', 'error');
    }
}

// ===== –ò–ì–†–ê –†–£–õ–ï–¢–ö–ê =====
function selectRouletteBet(type) {
    try {
        rouletteBetType = type;
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.bet-type-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–∏–ø—É —Å—Ç–∞–≤–∫–∏
        const selectedButton = document.querySelector(`[onclick*="${type}"]`);
        if (selectedButton) {
            selectedButton.classList.add('selected');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        const selectedBetElement = document.getElementById('selected-bet');
        if (!selectedBetElement) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç selected-bet –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        let betText = '';
        
        switch (type) {
            case 'red':
                betText = 'üî¥ –ö—Ä–∞—Å–Ω–æ–µ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x)';
                break;
            case 'black':
                betText = '‚ö´ –ß–µ—Ä–Ω–æ–µ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x)';
                break;
            case 'even':
                betText = '‚ö™ –ß–µ—Ç–Ω–æ–µ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x)';
                break;
            case 'odd':
                betText = '‚ö™ –ù–µ—á–µ—Ç–Ω–æ–µ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x)';
                break;
            case '1-18':
                betText = '1-18 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x)';
                break;
            case '19-36':
                betText = '19-36 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2x)';
                break;
            case 'number':
                const numberInput = document.getElementById('roulette-number');
                if (!numberInput) {
                    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç roulette-number –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }
                const number = parseInt(numberInput.value);
                if (number >= 0 && number <= 36) {
                    rouletteBetNumber = number;
                    betText = `–ß–∏—Å–ª–æ ${number} (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 35x)`;
                } else {
                    showNotification('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36', 'error');
                    return;
                }
                break;
        }
        
        selectedBetElement.textContent = betText;
        
        const spinBtn = document.getElementById('spin-btn');
        if (spinBtn) {
            spinBtn.disabled = false;
        }
        
        console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ:', type);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ selectRouletteBet:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞–≤–∫–∏', 'error');
    }
}

function spinRoulette() {
    try {
        if (!rouletteBetType) {
            showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }
        
        const betInput = document.getElementById('roulette-bet');
        if (!betInput) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç roulette-bet –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const bet = parseInt(betInput.value);
        
        if (!bet || bet < 1) {
            showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É', 'error');
            return;
        }
        
        if (!currentUser || (currentUser.balance || 0) < bet) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–ø–∞–Ω—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏ (0-36)
        const rouletteResult = Math.floor(Math.random() * 37);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultElement = document.getElementById('roulette-result');
        if (resultElement) {
            resultElement.textContent = rouletteResult;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (rouletteResult === 0) {
                resultElement.className = 'roulette-number green';
            } else if ([1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(rouletteResult)) {
                resultElement.className = 'roulette-number red';
            } else {
                resultElement.className = 'roulette-number black';
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏
        let isWin = false;
        let multiplier = 0;
        
        switch (rouletteBetType) {
            case 'red':
                isWin = rouletteResult !== 0 && [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(rouletteResult);
                multiplier = 2;
                break;
            case 'black':
                isWin = rouletteResult !== 0 && ![1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(rouletteResult);
                multiplier = 2;
                break;
            case 'even':
                isWin = rouletteResult !== 0 && rouletteResult % 2 === 0;
                multiplier = 2;
                break;
            case 'odd':
                isWin = rouletteResult !== 0 && rouletteResult % 2 === 1;
                multiplier = 2;
                break;
            case '1-18':
                isWin = rouletteResult >= 1 && rouletteResult <= 18;
                multiplier = 2;
                break;
            case '19-36':
                isWin = rouletteResult >= 19 && rouletteResult <= 36;
                multiplier = 2;
                break;
            case 'number':
                isWin = rouletteResult === rouletteBetNumber;
                multiplier = 35;
                break;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        const winAmount = isWin ? bet * multiplier : 0;
        const loseAmount = isWin ? 0 : bet;
        
        if (currentUser) {
            const newBalance = (currentUser.balance || 0) + winAmount - loseAmount;
            currentUser.balance = newBalance;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ DataSyncManager, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if (dataSyncManager && typeof dataSyncManager.updateUserBalance === 'function') {
                try {
                    dataSyncManager.updateUserBalance(newBalance);
                } catch (error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ DataSyncManager:', error);
                }
            }
            
            updateUserInfo();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultTextElement = document.getElementById('roulette-result-text');
        if (resultTextElement) {
            let message;
            if (isWin) {
                message = `–ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: ${winAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`;
                resultTextElement.className = 'game-result win';
                showNotification(`–í—ã–∏–≥—Ä—ã—à: +${winAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`, 'success');
            } else {
                message = `–ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –ü—Ä–æ–∏–≥—Ä—ã—à: ${loseAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤.`;
                resultTextElement.className = 'game-result lose';
                showNotification(`–ü—Ä–æ–∏–≥—Ä—ã—à: ${loseAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'error');
            }
            resultTextElement.textContent = message;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏
        setTimeout(() => {
            resetGameState();
        }, 3000);
        
        console.log('‚úÖ –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ spinRoulette:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Ä—É–ª–µ—Ç–∫—É', 'error');
    }
}

// ===== –£–¢–ò–õ–ò–¢–´ =====
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

function logout() {
    localStorage.removeItem('currentUser');
    window.location.href = 'login.html';
}

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨ =====
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.showGame = showGame;
window.startBlackjack = startBlackjack;
window.hitCard = hitCard;
window.standGame = standGame;
window.playDice = playDice;
window.selectRouletteBet = selectRouletteBet;
window.spinRoulette = spinRoulette;

console.log('üéÆ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∏–Ω–∏-–∏–≥—Ä —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
console.log('  showGame:', typeof window.showGame);
console.log('  startBlackjack:', typeof window.startBlackjack);
console.log('  playDice:', typeof window.playDice);
console.log('  selectRouletteBet:', typeof window.selectRouletteBet);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof window.showGame === 'function') {
            window.showGame('blackjack');
        }
    }, 100);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:');
        console.log('  window.showGame:', typeof window.showGame);
        console.log('  window.startBlackjack:', typeof window.startBlackjack);
        console.log('  window.hitCard:', typeof window.hitCard);
        console.log('  window.standGame:', typeof window.standGame);
        console.log('  window.playDice:', typeof window.playDice);
        console.log('  window.selectRouletteBet:', typeof window.selectRouletteBet);
        console.log('  window.spinRoulette:', typeof window.spinRoulette);
    }, 2000);
}); 
