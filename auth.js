// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let database = null;
let dbRef = null;
let dbSet = null;
let dbGet = null;
let dbUpdate = null;

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
window.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ auth.js...');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        await initializeFirebase();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        checkExistingAuth();
        
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventHandlers();
        
        console.log('‚úÖ auth.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ auth.js:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã', 'error');
    }
});

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE =====
async function initializeFirebase() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ firebaseConfig –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!window.firebaseConfig) {
            throw new Error('Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Firebase –º–æ–¥—É–ª–∏
        const { initializeApp } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js');
        const { 
            getDatabase, 
            ref, 
            set, 
            get, 
            update
        } = await import('https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
        const app = initializeApp(window.firebaseConfig);
        database = getDatabase(app);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        dbRef = ref;
        dbSet = set;
        dbGet = get;
        dbUpdate = update;
        
        console.log('üî• Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('üî• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
        throw error;
    }
}

function checkExistingAuth() {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        console.log('üë§ –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
        window.location.href = 'main.html';
    }
}


// ===== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô =====
function setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    document.addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            const activeElement = document.activeElement;
            
            if (activeElement && activeElement.id === 'loginPassword') {
                attemptLogin();
            } else if (activeElement && activeElement.id === 'registerConfirmPassword') {
                attemptRegister();
            }
        }
    });
    
    console.log('‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–†–ú–ê–ú–ò =====
function showRegisterForm() {
    console.log('üìù –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    document.getElementById('login-form').style.display = 'none';
    document.getElementById('register-form').classList.add('active');
}

function showLoginForm() {
    console.log('üîë –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞');
    document.getElementById('register-form').classList.remove('active');
    document.getElementById('login-form').style.display = 'block';
}

// ===== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø =====
async function attemptLogin() {
    console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
    
    const username = document.getElementById('loginUsername')?.value?.trim();
    const password = document.getElementById('loginPassword')?.value?.trim();
    
    if (!username || !password) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    try {
        console.log(`üë§ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
        
        const userRef = dbRef(database, `users/${username}`);
        const snapshot = await dbGet(userRef);
        
        if (!snapshot.exists()) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        const userData = snapshot.val();
        console.log(`üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, { role: userData.role, status: userData.status });
        
        if (userData.password !== password) {
            console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'error');
            return;
        }
        
        if (userData.status === 'inactive') {
            console.log(`üö´ –ê–∫–∫–∞—É–Ω—Ç ${username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
            showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'error');
            return;
        }
        
        const currentUser = {
            username: username,
            ...userData
        };
        
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
        
        showNotification('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        
        setTimeout(() => {
            window.location.href = 'main.html';
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + error.message, 'error');
    }
};

async function attemptRegister() {
    console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    
    const username = document.getElementById('registerUsername')?.value?.trim();
    const password = document.getElementById('registerPassword')?.value?.trim();
    const confirmPassword = document.getElementById('registerConfirmPassword')?.value?.trim();
    
    if (!username || !password || !confirmPassword) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (username.length < 3) {
        showNotification('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error');
        return;
    }
    
    if (password.length < 4) {
        showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞', 'error');
        return;
    }
    
    if (password !== confirmPassword) {
        showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
        return;
    }
    
    try {
        console.log(`üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
        
        const userRef = dbRef(database, `users/${username}`);
        const snapshot = await dbGet(userRef);
        
        if (snapshot.exists()) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error');
            return;
        }
        
        const newUser = {
            password: password,
            role: 'user',
            balance: 5000,
            betLimit: 1000,
            registeredAt: Date.now(),
            status: 'active'
        };
        
        await dbSet(userRef, newUser);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
        
        showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success');
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        document.getElementById('registerUsername').value = '';
        document.getElementById('registerPassword').value = '';
        document.getElementById('registerConfirmPassword').value = '';
        
        setTimeout(() => {
            showLoginForm();
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + error.message, 'error');
    }
};

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'error') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButton = document.createElement('button');
    closeButton.innerHTML = '√ó';
    closeButton.style.cssText = `
        position: absolute;
        top: 5px;
        right: 10px;
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    `;
    closeButton.onclick = () => notification.remove();
    
    notification.style.position = 'relative';
    notification.style.paddingRight = '40px';
    notification.appendChild(closeButton);
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideIn 0.3s ease reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====
async function testFirebaseConnection() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase...');
        const testRef = dbRef(database, 'test');
        await dbSet(testRef, { timestamp: Date.now(), test: true });
        console.log('‚úÖ Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        showNotification('Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'success');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase: ' + error.message, 'error');
    }
};

function showDemoAccounts() {
    const demoAccounts = [
        { username: 'admin', password: 'admin123', role: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
        { username: 'user1', password: 'user123', role: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
        { username: 'moderator1', password: 'mod123', role: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' }
    ];
    
    console.log('üë• –î–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    demoAccounts.forEach(account => {
        console.log(`   ${account.role}: ${account.username} / ${account.password}`);
    });
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.showRegisterForm = showRegisterForm;
window.showLoginForm = showLoginForm;
window.attemptLogin = attemptLogin;
window.attemptRegister = attemptRegister;
window.testFirebaseConnection = testFirebaseConnection;
window.showDemoAccounts = showDemoAccounts;

// –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∫–∞–∑ –¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
setTimeout(() => {
    showDemoAccounts();
}, 1000);
