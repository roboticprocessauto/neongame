// ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• =====

// sync-manager.js - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Firebase –≤–º–µ—Å—Ç–æ ES6 –∏–º–ø–æ—Ä—Ç–æ–≤

class DataSyncManager {
    constructor() {
        this.app = null;
        this.database = null;
        this.currentUser = null;
        this.userRef = null;
        this.listeners = new Map();
        this.syncInterval = null;
        this.isOnline = navigator.onLine;
        this.pendingUpdates = new Map();
        this.lastSyncTime = 0;
        this.syncInProgress = false;
        
        this.init();
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    async init() {
        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Firebase
            await this.waitForFirebase();
            
            this.app = window.firebase.initializeApp(window.firebaseConfig);
            this.database = window.firebase.database();
            this.setupEventListeners();
            this.loadPendingUpdates();
            console.log('üîÑ DataSyncManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataSyncManager:', error);
        }
    }
    
    // ===== –û–ñ–ò–î–ê–ù–ò–ï FIREBASE =====
    async waitForFirebase() {
        let attempts = 0;
        const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
        
        while (!window.firebase && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (!window.firebase) {
            throw new Error('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        console.log('üî• Firebase –≥–æ—Ç–æ–≤ –¥–ª—è DataSyncManager');
    }
    
    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
    async initializeUser(username) {
        try {
            console.log(`üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
            
            // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            this.cleanup();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.userRef = this.database.ref(`users/${username}`);
            
            // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
            const snapshot = await this.userRef.once('value');
            
            if (!snapshot.exists()) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            
            const userData = snapshot.val();
            this.currentUser = {
                username: username,
                ...userData,
                lastSync: Date.now()
            };
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
            this.updateLocalStorage();
            
            // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å real-time —Å–ª—É—à–∞—Ç–µ–ª–∏
            this.setupRealtimeListeners();
            
            // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            this.setupDisconnectHandlers();
            
            // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            this.startPeriodicSync();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await this.syncPendingUpdates();
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.currentUser);
            return this.currentUser;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }
    
    // ===== REAL-TIME –°–õ–£–®–ê–¢–ï–õ–ò =====
    setupRealtimeListeners() {
        if (!this.userRef || !this.currentUser) return;
        
        console.log('üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ real-time —Å–ª—É—à–∞—Ç–µ–ª–µ–π');
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userUnsubscribe = this.userRef.on('value', (snapshot) => {
            if (snapshot.exists()) {
                const firebaseData = snapshot.val();
                const oldUser = { ...this.currentUser };
                
                // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.currentUser = {
                    username: this.currentUser.username,
                    ...firebaseData,
                    lastSync: Date.now()
                };
                
                // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
                this.updateLocalStorage();
                
                // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const changes = this.detectUserChanges(oldUser, this.currentUser);
                
                // –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                this.notifyDataChange('user_updated', {
                    user: this.currentUser,
                    changes: changes
                });
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                this.handleUserChangeNotifications(changes);
                
                console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:', changes);
            }
        }, (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        });
        
        this.listeners.set('user', userUnsubscribe);
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
        const settingsRef = this.database.ref('settings');
        const settingsUnsubscribe = settingsRef.on('value', (snapshot) => {
            if (snapshot.exists()) {
                const settings = snapshot.val();
                this.notifyDataChange('settings_updated', settings);
                console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', settings);
            }
        });
        
        this.listeners.set('settings', settingsUnsubscribe);
        
        // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π (–¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
        const eventsRef = this.database.ref('events');
        const eventsUnsubscribe = eventsRef.on('value', (snapshot) => {
            if (snapshot.exists()) {
                const events = snapshot.val();
                this.notifyDataChange('events_updated', events);
                console.log('üìÖ –°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
            }
        });
        
        this.listeners.set('events', eventsUnsubscribe);
    }
    
    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø =====
    setupDisconnectHandlers() {
        if (!this.userRef) return;
        
        try {
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "offline" –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            const presenceRef = this.database.ref(`presence/${this.currentUser.username}`);
            presenceRef.onDisconnect().set({
                online: false,
                lastSeen: window.firebase.database.ServerValue.TIMESTAMP
            });
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "online" —Å–µ–π—á–∞—Å
            presenceRef.update({
                online: true,
                lastConnected: window.firebase.database.ServerValue.TIMESTAMP
            });
            
            console.log('üîå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
        }
    }
    
    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–´–ú –•–†–ê–ù–ò–õ–ò–©–ï–ú =====
    updateLocalStorage() {
        try {
            if (this.currentUser) {
                const userData = {
                    ...this.currentUser,
                    lastSync: Date.now()
                };
                
                localStorage.setItem('currentUser', JSON.stringify(userData));
                localStorage.setItem('lastSyncTime', Date.now().toString());
                
                console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        }
    }
    
    getLocalUser() {
        try {
            const userData = localStorage.getItem('currentUser');
            const lastSync = localStorage.getItem('lastSyncTime');
            
            if (userData && lastSync) {
                const user = JSON.parse(userData);
                const syncTime = parseInt(lastSync);
                
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (2 –º–∏–Ω—É—Ç—ã)
                if (Date.now() - syncTime < 120000) {
                    console.log('üì± –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
                    return user;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', error);
        }
        
        return null;
    }
    
    clearLocalData() {
        try {
            localStorage.removeItem('currentUser');
            localStorage.removeItem('lastSyncTime');
            localStorage.removeItem('pendingUpdates');
            this.currentUser = null;
            console.log('üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', error);
        }
    }
    
    // ===== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø =====
    startPeriodicSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
        this.syncInterval = setInterval(() => {
            this.performPeriodicSync();
        }, 15000);
        
        console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 15 —Å–µ–∫)');
    }
    
    async performPeriodicSync() {
        if (!this.isOnline || this.syncInProgress) return;
        
        this.syncInProgress = true;
        
        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await this.syncPendingUpdates();
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.shouldRefreshUserData()) {
                await this.refreshUserData();
            }
            
            console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        } finally {
            this.syncInProgress = false;
        }
    }
    
    shouldRefreshUserData() {
        if (!this.currentUser || !this.currentUser.lastSync) return true;
        
        // –û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        return Date.now() - this.currentUser.lastSync > 60000;
    }
    
    async refreshUserData() {
        if (!this.userRef) return;
        
        try {
            const snapshot = await this.userRef.once('value');
            
            if (snapshot.exists()) {
                const firebaseData = snapshot.val();
                const oldUser = { ...this.currentUser };
                
                this.currentUser = {
                    username: this.currentUser.username,
                    ...firebaseData,
                    lastSync: Date.now()
                };
                
                this.updateLocalStorage();
                
                const changes = this.detectUserChanges(oldUser, this.currentUser);
                if (changes.length > 0) {
                    this.notifyDataChange('user_refreshed', {
                        user: this.currentUser,
                        changes: changes
                    });
                    
                    console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', changes);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }
    
    // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
    async updateUserData(updates, skipLocalUpdate = false) {
        if (!this.userRef || !this.currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        try {
            console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updates);
            
            const updateData = {
                ...updates,
                lastUpdated: window.firebase.database.ServerValue.TIMESTAMP
            };
            
            if (this.isOnline) {
                // –û–±–Ω–æ–≤–∏—Ç—å –≤ Firebase
                await this.userRef.update(updateData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Firebase');
                
                // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏—à–ª–æ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
                if (!skipLocalUpdate) {
                    Object.assign(this.currentUser, updates);
                    this.updateLocalStorage();
                }
            } else {
                // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.addPendingUpdate(updateData);
                console.log('üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
                
                // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è UI
                Object.assign(this.currentUser, updates);
                this.updateLocalStorage();
                
                this.notifyDataChange('user_updated_offline', {
                    user: this.currentUser,
                    updates: updates
                });
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }
    
    // ===== –†–ê–ë–û–¢–ê –û–§–õ–ê–ô–ù =====
    addPendingUpdate(updateData) {
        const updateId = Date.now().toString() + '_' + Math.random().toString(36).substr(2, 9);
        this.pendingUpdates.set(updateId, {
            data: updateData,
            timestamp: Date.now(),
            retries: 0,
            maxRetries: 3
        });
        
        this.savePendingUpdates();
        console.log(`üì§ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updateId}`);
    }
    
    savePendingUpdates() {
        try {
            const updatesArray = Array.from(this.pendingUpdates.entries());
            localStorage.setItem('pendingUpdates', JSON.stringify(updatesArray));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        }
    }
    
    loadPendingUpdates() {
        try {
            const saved = localStorage.getItem('pendingUpdates');
            if (saved) {
                const updatesArray = JSON.parse(saved);
                this.pendingUpdates = new Map(updatesArray);
                console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.pendingUpdates.size} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
            this.pendingUpdates = new Map();
        }
    }
    
    async syncPendingUpdates() {
        if (!this.isOnline || this.pendingUpdates.size === 0 || !this.userRef) return;
        
        console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${this.pendingUpdates.size} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
        
        const updates = Array.from(this.pendingUpdates.entries());
        
        for (const [updateId, updateInfo] of updates) {
            try {
                await this.userRef.update(updateInfo.data);
                this.pendingUpdates.delete(updateId);
                console.log(`‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${updateId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
            } catch (error) {
                updateInfo.retries++;
                if (updateInfo.retries >= updateInfo.maxRetries) {
                    this.pendingUpdates.delete(updateId);
                    console.error(`‚ùå –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${updateId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ ${updateInfo.maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
                } else {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${updateId}, –ø–æ–ø—ã—Ç–∫–∞ ${updateInfo.retries}/${updateInfo.maxRetries}`);
                }
            }
        }
        
        this.savePendingUpdates();
        
        if (this.pendingUpdates.size === 0) {
            console.log('‚úÖ –í—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }
    
    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô =====
    setupEventListeners() {
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        window.addEventListener('online', () => {
            this.isOnline = true;
            console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.notifyDataChange('connection_restored', { online: true });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                this.syncPendingUpdates();
                this.refreshUserData();
            }, 1000);
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
            console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
            this.notifyDataChange('connection_lost', { online: false });
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.cleanup();
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.currentUser && this.isOnline) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                setTimeout(() => {
                    this.refreshUserData();
                }, 500);
            }
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
        window.addEventListener('focus', () => {
            if (this.currentUser && this.isOnline) {
                setTimeout(() => {
                    this.refreshUserData();
                }, 500);
            }
        });
    }
    
    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    detectUserChanges(oldData, newData) {
        const changes = [];
        const importantFields = ['balance', 'betLimit', 'role', 'status'];
        
        importantFields.forEach(field => {
            if (oldData[field] !== newData[field]) {
                changes.push({
                    field: field,
                    oldValue: oldData[field],
                    newValue: newData[field],
                    timestamp: Date.now()
                });
            }
        });
        
        return changes;
    }
    
    handleUserChangeNotifications(changes) {
        changes.forEach(change => {
            switch (change.field) {
                case 'balance':
                    const diff = change.newValue - change.oldValue;
                    if (diff !== 0) {
                        this.showBalanceNotification(diff);
                    }
                    break;
                    
                case 'role':
                    this.showNotification(`–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${this.getRoleName(change.newValue)}`, 'info');
                    break;
                    
                case 'status':
                    if (change.newValue === 'inactive') {
                        this.showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'error');
                    } else if (change.newValue === 'active') {
                        this.showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'success');
                    }
                    break;
                    
                case 'betLimit':
                    this.showNotification(`–õ–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${change.newValue} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'info');
                    break;
            }
        });
    }
    
    showBalanceNotification(diff) {
        const message = diff > 0 
            ? `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ ${diff} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`
            : `üìâ –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ ${Math.abs(diff)} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
            
        this.showNotification(message, diff > 0 ? 'success' : 'warning');
    }
    
    showNotification(message, type = 'info') {
        if (window.showNotification) {
            window.showNotification(message, type);
        } else {
            console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
        }
    }
    
    getRoleName(role) {
        const roles = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        return roles[role] || role;
    }
    
    notifyDataChange(type, data) {
        try {
            const event = new CustomEvent('dataSync', {
                detail: { type, data, timestamp: Date.now() }
            });
            window.dispatchEvent(event);
            console.log(`üì° –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${type}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
        }
    }
    
    // ===== –û–ß–ò–°–¢–ö–ê =====
    cleanup() {
        console.log('üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ DataSyncManager...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        this.listeners.forEach((unsubscribe, key) => {
            try {
                if (typeof unsubscribe === 'function') {
                    unsubscribe();
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è ${key}:`, error);
            }
        });
        this.listeners.clear();
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userRef) {
            try {
                this.userRef.off();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è userRef:', error);
            }
            this.userRef = null;
        }
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        this.savePendingUpdates();
        
        console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ DataSyncManager –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    // ===== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ =====
    getCurrentUser() {
        return this.currentUser;
    }
    
    async forceRefresh() {
        return await this.refreshUserData();
    }
    
    isUserOnline() {
        return this.isOnline;
    }
    
    getPendingUpdatesCount() {
        return this.pendingUpdates.size;
    }
    
    getSyncStatus() {
        return {
            online: this.isOnline,
            lastSync: this.currentUser?.lastSync || 0,
            pendingUpdates: this.pendingUpdates.size,
            syncInProgress: this.syncInProgress
        };
    }
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====
let dataSyncManager = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
    if (!dataSyncManager) {
        dataSyncManager = new DataSyncManager();
        window.dataSyncManager = dataSyncManager;
        console.log('üöÄ DataSyncManager —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    }
});


