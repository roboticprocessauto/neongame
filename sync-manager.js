// ===== –°–ò–°–¢–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• =====

// sync-manager.js - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { 
    getDatabase, 
    ref as dbRef, 
    get as dbGet, 
    onValue, 
    off,
    serverTimestamp,
    update as dbUpdate
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

class DataSyncManager {
    constructor() {
        this.app = initializeApp(window.firebaseConfig);
        this.database = getDatabase(this.app);
        this.currentUser = null;
        this.userRef = null;
        this.listeners = new Map();
        this.syncInterval = null;
        this.isOnline = navigator.onLine;
        this.pendingUpdates = new Map();
        
        this.setupEventListeners();
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –û–ß–ò–°–¢–ö–ê =====
    
    async initializeUser(username) {
        try {
            // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
            this.cleanup();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.userRef = dbRef(this.database, `users/${username}`);
            
            // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
            const snapshot = await dbGet(this.userRef);
            
            if (!snapshot.exists()) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            
            const userData = snapshot.val();
            this.currentUser = {
                username: username,
                ...userData,
                lastSync: Date.now()
            };
            
            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
            this.updateLocalStorage();
            
            // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å real-time —Å–ª—É—à–∞—Ç–µ–ª–∏
            this.setupRealtimeListeners();
            
            // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            this.startPeriodicSync();
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return this.currentUser;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }
    
    cleanup() {
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        this.listeners.forEach((unsubscribe, key) => {
            if (typeof unsubscribe === 'function') {
                unsubscribe();
            }
        });
        this.listeners.clear();
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userRef) {
            off(this.userRef);
            this.userRef = null;
        }
        
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    // ===== REAL-TIME –°–õ–£–®–ê–¢–ï–õ–ò =====
    
    setupRealtimeListeners() {
        if (!this.userRef || !this.currentUser) return;
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userUnsubscribe = onValue(this.userRef, (snapshot) => {
            if (snapshot.exists()) {
                const userData = snapshot.val();
                const oldBalance = this.currentUser.balance;
                
                this.currentUser = {
                    username: this.currentUser.username,
                    ...userData,
                    lastSync: Date.now()
                };
                
                this.updateLocalStorage();
                this.notifyDataChange('user', this.currentUser);
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
                if (oldBalance !== userData.balance) {
                    const diff = userData.balance - oldBalance;
                    this.showBalanceNotification(diff);
                }
                
                console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
            }
        }, (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        });
        
        this.listeners.set('user', userUnsubscribe);
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
        const settingsRef = dbRef(this.database, 'settings');
        const settingsUnsubscribe = onValue(settingsRef, (snapshot) => {
            if (snapshot.exists()) {
                const settings = snapshot.val();
                this.notifyDataChange('settings', settings);
                console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            }
        });
        
        this.listeners.set('settings', settingsUnsubscribe);
    }

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–´–ú –•–†–ê–ù–ò–õ–ò–©–ï–ú =====
    
    updateLocalStorage() {
        if (this.currentUser) {
            localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            localStorage.setItem('lastSyncTime', Date.now().toString());
        }
    }
    
    getLocalUser() {
        try {
            const userData = localStorage.getItem('currentUser');
            const lastSync = localStorage.getItem('lastSyncTime');
            
            if (userData && lastSync) {
                const user = JSON.parse(userData);
                const syncTime = parseInt(lastSync);
                
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (5 –º–∏–Ω—É—Ç)
                if (Date.now() - syncTime < 300000) {
                    return user;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', error);
        }
        
        return null;
    }
    
    clearLocalData() {
        localStorage.removeItem('currentUser');
        localStorage.removeItem('lastSyncTime');
        this.currentUser = null;
        console.log('üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }

    // ===== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø =====
    
    startPeriodicSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.syncInterval = setInterval(() => {
            this.forceSyncFromFirebase();
        }, 30000);
        
        console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
    }
    
    async forceSyncFromFirebase() {
        if (!this.userRef || !this.isOnline) return;
        
        try {
            const snapshot = await dbGet(this.userRef);
            
            if (snapshot.exists()) {
                const userData = snapshot.val();
                const oldUser = { ...this.currentUser };
                
                this.currentUser = {
                    username: this.currentUser.username,
                    ...userData,
                    lastSync: Date.now()
                };
                
                this.updateLocalStorage();
                
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const changes = this.detectChanges(oldUser, this.currentUser);
                if (changes.length > 0) {
                    changes.forEach(change => {
                        this.notifyDataChange('user_change', change);
                    });
                    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                }
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await this.syncPendingUpdates();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
    
    async updateUserData(updates) {
        if (!this.userRef || !this.currentUser) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        try {
            // –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            const updateData = {
                ...updates,
                lastUpdated: serverTimestamp()
            };
            
            if (this.isOnline) {
                // –û–±–Ω–æ–≤–∏—Ç—å –≤ Firebase
                await dbUpdate(this.userRef, updateData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Firebase');
            } else {
                // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.addPendingUpdate(updateData);
                console.log('üì§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
            
            // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            Object.assign(this.currentUser, updates);
            this.updateLocalStorage();
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // ===== –†–ê–ë–û–¢–ê –û–§–õ–ê–ô–ù =====
    
    addPendingUpdate(updateData) {
        const updateId = Date.now().toString();
        this.pendingUpdates.set(updateId, {
            data: updateData,
            timestamp: Date.now(),
            retries: 0
        });
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
        localStorage.setItem('pendingUpdates', JSON.stringify(Array.from(this.pendingUpdates.entries())));
    }
    
    async syncPendingUpdates() {
        if (!this.isOnline || this.pendingUpdates.size === 0) return;
        
        const updates = Array.from(this.pendingUpdates.entries());
        
        for (const [updateId, updateInfo] of updates) {
            try {
                await dbUpdate(this.userRef, updateInfo.data);
                this.pendingUpdates.delete(updateId);
                console.log(`‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${updateId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
            } catch (error) {
                updateInfo.retries++;
                if (updateInfo.retries >= 3) {
                    this.pendingUpdates.delete(updateId);
                    console.error(`‚ùå –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${updateId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫`);
                } else {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${updateId}, –ø–æ–ø—ã—Ç–∫–∞ ${updateInfo.retries}`);
                }
            }
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å localStorage
        localStorage.setItem('pendingUpdates', JSON.stringify(Array.from(this.pendingUpdates.entries())));
    }

    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô =====
    
    setupEventListeners() {
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        window.addEventListener('online', () => {
            this.isOnline = true;
            console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.syncPendingUpdates();
            this.forceSyncFromFirebase();
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
            console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.cleanup();
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.currentUser) {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                this.forceSyncFromFirebase();
            }
        });
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    detectChanges(oldData, newData) {
        const changes = [];
        const keys = ['balance', 'betLimit', 'role', 'status'];
        
        keys.forEach(key => {
            if (oldData[key] !== newData[key]) {
                changes.push({
                    field: key,
                    oldValue: oldData[key],
                    newValue: newData[key]
                });
            }
        });
        
        return changes;
    }
    
    showBalanceNotification(diff) {
        const message = diff > 0 
            ? `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ ${diff} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`
            : `üìâ –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ ${Math.abs(diff)} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
            
        if (window.showNotification) {
            window.showNotification(message, diff > 0 ? 'success' : 'warning');
        }
    }
    
    notifyDataChange(type, data) {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å custom event –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        const event = new CustomEvent('dataSync', {
            detail: { type, data }
        });
        window.dispatchEvent(event);
    }

    // ===== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    getCurrentUser() {
        return this.currentUser;
    }
    
    async refreshUserData() {
        return await this.forceSyncFromFirebase();
    }
    
    isUserOnline() {
        return this.isOnline;
    }
    
    getPendingUpdatesCount() {
        return this.pendingUpdates.size;
    }
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† =====
window.dataSyncManager = new DataSyncManager();

// ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô main.js –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====

// –û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é checkAuth –≤ main.js
async function checkAuth() {
    const savedUser = localStorage.getItem('currentUser');
    if (!savedUser) {
        window.location.href = 'login.html';
        return;
    }
    
    try {
        const userData = JSON.parse(savedUser);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        currentUser = await window.dataSyncManager.initializeUser(userData.username);
        
        updateUserInfo();
        updateDailyBonusButton();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏ –≤ –º–µ–Ω—é
        if (currentUser.role === "admin") {
            document.getElementById("admin-link").style.display = "block";
        } else if (currentUser.role === "moderator") {
            document.getElementById("moderator-link").style.display = "block";
        }
        
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
        window.addEventListener('dataSync', (event) => {
            if (event.detail.type === 'user' || event.detail.type === 'user_change') {
                currentUser = window.dataSyncManager.getCurrentUser();
                updateUserInfo();
                updateDailyBonusButton();
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        localStorage.removeItem('currentUser');
        window.location.href = 'login.html';
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function updateUserBalance(newBalance) {
    try {
        await window.dataSyncManager.updateUserData({ balance: newBalance });
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é logout
function logout() {
    window.dataSyncManager.cleanup();
    window.dataSyncManager.clearLocalData();
    window.location.href = 'login.html';
}

// –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function addSyncStatusIndicator() {
    const header = document.querySelector('.header .user-info');
    if (header) {
        const syncStatus = document.createElement('div');
        syncStatus.id = 'sync-status';
        syncStatus.style.cssText = `
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #4caf50;
            margin-left: 10px;
        `;
        syncStatus.innerHTML = 'üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
        header.appendChild(syncStatus);
        
        // –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        window.addEventListener('dataSync', () => {
            syncStatus.innerHTML = 'üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
            syncStatus.style.color = '#4caf50';
        });
        
        window.addEventListener('offline', () => {
            syncStatus.innerHTML = 'üî¥ –û—Ñ–ª–∞–π–Ω';
            syncStatus.style.color = '#f44336';
        });
        
        window.addEventListener('online', () => {
            syncStatus.innerHTML = 'üü° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
            syncStatus.style.color = '#ff9800';
        });
    }
}

// –í—ã–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
window.addEventListener('DOMContentLoaded', () => {
    addSyncStatusIndicator();
});

export { DataSyncManager };
