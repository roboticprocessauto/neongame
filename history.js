// ===== HISTORY.JS –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====

import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { 
    getDatabase, 
    ref as dbRef, 
    get as dbGet
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

const app = initializeApp(window.firebaseConfig);
const database = getDatabase(app);

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let allUserBets = [];
let filteredBets = [];
let events = {};

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
window.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è history.js');
    
    try {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ sync manager
        await waitForSyncManager();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await checkAuth();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadEvents();
        await loadUserBetsHistory();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        setupSyncEventListeners();
        
        console.log('‚úÖ history.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ history.js:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫', 'error');
    }
});

// ===== –û–ñ–ò–î–ê–ù–ò–ï SYNC MANAGER =====
async function waitForSyncManager() {
    let attempts = 0;
    const maxAttempts = 50;
    
    while (!window.dataSyncManager && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    if (!window.dataSyncManager) {
        console.warn('‚ö†Ô∏è DataSyncManager –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return false;
    }
    
    console.log('‚úÖ DataSyncManager –≥–æ—Ç–æ–≤ –¥–ª—è history.js');
    return true;
}

// ===== –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =====
async function checkAuth() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ sync manager –∏–ª–∏ localStorage
        if (window.dataSyncManager) {
            currentUser = window.dataSyncManager.getCurrentUser();
        }
        
        if (!currentUser) {
            const savedUser = localStorage.getItem('currentUser');
            if (!savedUser) {
                window.location.href = 'login.html';
                return;
            }
            currentUser = JSON.parse(savedUser);
        }
        
        updateUserInfo();
        showRoleSpecificLinks();
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:', currentUser.username);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        window.location.href = 'login.html';
    }
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–£–®–ê–¢–ï–õ–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function setupSyncEventListeners() {
    if (!window.dataSyncManager) return;
    
    console.log('üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è history.js');
    
    window.addEventListener('dataSync', (event) => {
        const { type, data } = event.detail;
        console.log(`üì° History.js –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ: ${type}`);
        
        switch (type) {
            case 'user_updated':
            case 'user_refreshed':
                handleUserDataUpdate(data);
                break;
                
            case 'connection_restored':
                handleConnectionRestored();
                break;
                
            case 'connection_lost':
                handleConnectionLost();
                break;
        }
    });
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function handleUserDataUpdate(data) {
    if (data.user) {
        currentUser = data.user;
        updateUserInfo();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loadUserBetsHistory();
        
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ history.js');
    }
}

function handleConnectionRestored() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 'success');
    loadUserBetsHistory();
}

function handleConnectionLost() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', 'warning');
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê =====
function updateUserInfo() {
    if (!currentUser) return;
    
    const balanceElement = document.getElementById('user-balance');
    const usernameElement = document.getElementById('username');
    
    if (balanceElement) {
        balanceElement.textContent = `${currentUser.balance.toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    }
    
    if (usernameElement) {
        usernameElement.textContent = currentUser.username;
    }
}

function showRoleSpecificLinks() {
    if (!currentUser) return;
    
    const adminLink = document.getElementById("admin-link");
    const moderatorLink = document.getElementById("moderator-link");
    
    if (adminLink && currentUser.role === "admin") {
        adminLink.style.display = "block";
    }
    
    if (moderatorLink && currentUser.role === "moderator") {
        moderatorLink.style.display = "block";
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô =====
async function loadEvents() {
    try {
        const eventsRef = dbRef(database, 'events');
        const snapshot = await dbGet(eventsRef);
        
        if (snapshot.exists()) {
            events = snapshot.val();
        }
        
        console.log('üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –°–¢–ê–í–û–ö =====
async function loadUserBetsHistory() {
    if (!currentUser) return;

    try {
        const container = document.getElementById('bets-history-container');
        if (container) {
            container.innerHTML = '<div class="loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫...</div>';
        }

        const betsRef = dbRef(database, 'bets');
        const snapshot = await dbGet(betsRef);

        if (snapshot.exists()) {
            const allBets = snapshot.val();
            allUserBets = Object.entries(allBets)
                .filter(([betId, bet]) => bet.user === currentUser.username)
                .map(([betId, bet]) => ({ id: betId, ...bet }))
                .sort((a, b) => b.timestamp - a.timestamp);

            filteredBets = [...allUserBets];
            displayUserStats();
            displayBets();
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUserBets.length} —Å—Ç–∞–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.username}`);
        } else {
            allUserBets = [];
            filteredBets = [];
            displayUserStats();
            displayEmptyState();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫:', error);
        const container = document.getElementById('bets-history-container');
        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫</p>
                    <button class="btn" onclick="loadUserBetsHistory()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }
}

// ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
function displayUserStats() {
    const statsContainer = document.getElementById('user-stats');
    if (!statsContainer) return;
    
    const totalBets = allUserBets.length;
    const wonBets = allUserBets.filter(bet => bet.status === 'won').length;
    const lostBets = allUserBets.filter(bet => bet.status === 'lost').length;
    const pendingBets = allUserBets.filter(bet => bet.status === 'pending').length;
    
    const totalStaked = allUserBets.reduce((sum, bet) => sum + bet.amount, 0);
    const totalWon = allUserBets
        .filter(bet => bet.status === 'won')
        .reduce((sum, bet) => sum + (bet.winAmount || bet.amount * bet.coefficient), 0);
    
    const winRate = (wonBets + lostBets) > 0 ? ((wonBets / (wonBets + lostBets)) * 100).toFixed(1) : 0;
    const profit = totalWon - totalStaked;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    statsContainer.style.opacity = '0';
    statsContainer.innerHTML = `
        <div class="stat-card">
            <div class="stat-number">${totalBets}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${wonBets}</div>
            <div class="stat-label">–í—ã–∏–≥—Ä–∞–Ω–æ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${lostBets}</div>
            <div class="stat-label">–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${pendingBets}</div>
            <div class="stat-label">–í –æ–∂–∏–¥–∞–Ω–∏–∏</div>
        </div>
        <div class="stat-card">
            <div class="stat-number ${winRate >= 50 ? 'positive' : 'negative'}">${winRate}%</div>
            <div class="stat-label">–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</div>
        </div>
        <div class="stat-card">
            <div class="stat-number ${profit >= 0 ? 'positive' : 'negative'}">${profit >= 0 ? '+' : ''}${profit}</div>
            <div class="stat-label">–ü—Ä–∏–±—ã–ª—å (–ª—É–ø–∞–Ω—á–∏–∫–∏)</div>
        </div>
    `;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        statsContainer.style.transition = 'opacity 0.5s ease';
        statsContainer.style.opacity = '1';
    }, 100);
}

// ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–ê–í–û–ö =====
function displayBets() {
    const container = document.getElementById('bets-history-container');
    if (!container) return;
    
    if (filteredBets.length === 0) {
        displayEmptyState();
        return;
    }

    container.innerHTML = filteredBets.map(bet => {
        const potentialWin = (bet.amount * bet.coefficient).toFixed(2);
        const actualWin = bet.status === 'won' ? 
            (bet.winAmount || bet.amount * bet.coefficient).toFixed(2) : 0;

        return `
            <div class="bet-history-item" data-bet-id="${bet.id}">
                <div class="bet-header">
                    <div class="bet-id">–°—Ç–∞–≤–∫–∞ #${bet.id.substring(0, 8)}</div>
                    <div class="bet-status status-${bet.status}">${getStatusName(bet.status)}</div>
                </div>
                
                <div class="bet-details">
                    <div class="bet-info-item">
                        <div class="bet-info-label">–¢–∏–ø</div>
                        <div class="bet-info-value">${bet.type === 'single' ? '–û–¥–∏–Ω–æ—á–Ω–∞—è' : '–≠–∫—Å–ø—Ä–µ—Å—Å'}</div>
                    </div>
                    <div class="bet-info-item">
                        <div class="bet-info-label">–°—É–º–º–∞</div>
                        <div class="bet-info-value">${bet.amount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤</div>
                    </div>
                    <div class="bet-info-item">
                        <div class="bet-info-label">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç</div>
                        <div class="bet-info-value">${bet.coefficient}</div>
                    </div>
                    <div class="bet-info-item">
                        <div class="bet-info-label">–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à</div>
                        <div class="bet-info-value">${potentialWin} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤</div>
                    </div>
                    ${bet.status === 'won' ? `
                        <div class="bet-info-item">
                            <div class="bet-info-label">–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à</div>
                            <div class="bet-info-value positive">${actualWin} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤</div>
                        </div>
                    ` : ''}
                    ${bet.status === 'lost' ? `
                        <div class="bet-info-item">
                            <div class="bet-info-label">–ü—Ä–æ–∏–≥—Ä—ã—à</div>
                            <div class="bet-info-value negative">-${bet.amount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤</div>
                        </div>
                    ` : ''}
                    <div class="bet-info-item">
                        <div class="bet-info-label">–î–∞—Ç–∞</div>
                        <div class="bet-info-value">${new Date(bet.timestamp).toLocaleString()}</div>
                    </div>
                </div>

                <div class="bet-events">
                    <div class="bet-events-title">–°–æ–±—ã—Ç–∏—è:</div>
                    ${bet.events.map(event => {
                        const eventData = events[event.eventId];
                        return `
                            <div class="bet-event">
                                <div class="event-title">${event.eventTitle || eventData?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ'}</div>
                                <div class="event-choice">–í—ã–±–æ—Ä: ${event.option} (${event.coefficient})</div>
                                ${bet.status !== 'pending' && eventData?.winningOption ? `
                                    <div class="event-result ${event.option === eventData.winningOption ? 'correct' : 'incorrect'}">
                                        ${event.option === eventData.winningOption ? '‚úì –£–≥–∞–¥–∞–Ω–æ' : '‚úó –ù–µ —É–≥–∞–¥–∞–Ω–æ'}
                                    </div>
                                ` : ''}
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const betItems = container.querySelectorAll('.bet-history-item');
    betItems.forEach((item, index) => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(20px)';
        setTimeout(() => {
            item.style.transition = 'all 0.3s ease';
            item.style.opacity = '1';
            item.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

function displayEmptyState() {
    const container = document.getElementById('bets-history-container');
    if (!container) return;
    
    container.innerHTML = `
        <div class="empty-state">
            <div style="font-size: 64px; margin-bottom: 20px;">üéØ</div>
            <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫</h3>
            <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É!</p>
            <a href="main.html" class="btn">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º</a>
        </div>
    `;
}

// ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø =====
function applyFilters() {
    const statusFilter = document.getElementById('statusFilter')?.value || 'all';
    const typeFilter = document.getElementById('typeFilter')?.value || 'all';
    const periodFilter = document.getElementById('periodFilter')?.value || 'all';

    filteredBets = allUserBets.filter(bet => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (statusFilter !== 'all' && bet.status !== statusFilter) {
            return false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        if (typeFilter !== 'all' && bet.type !== typeFilter) {
            return false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if (periodFilter !== 'all') {
            const betDate = new Date(bet.timestamp);
            const now = new Date();
            
            switch (periodFilter) {
                case 'today':
                    if (betDate.toDateString() !== now.toDateString()) {
                        return false;
                    }
                    break;
                case 'week':
                    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    if (betDate < weekAgo) {
                        return false;
                    }
                    break;
                case 'month':
                    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                    if (betDate < monthAgo) {
                        return false;
                    }
                    break;
            }
        }

        return true;
    });

    displayBets();
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const totalText = filteredBets.length === allUserBets.length 
        ? `–ü–æ–∫–∞–∑–∞–Ω–æ ${filteredBets.length} —Å—Ç–∞–≤–æ–∫`
        : `–ü–æ–∫–∞–∑–∞–Ω–æ ${filteredBets.length} –∏–∑ ${allUserBets.length} —Å—Ç–∞–≤–æ–∫`;
        
    showNotification(totalText, 'info');
    
    console.log(`üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: –ø–æ–∫–∞–∑–∞–Ω–æ ${filteredBets.length} –∏–∑ ${allUserBets.length} —Å—Ç–∞–≤–æ–∫`);
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function getStatusName(status) {
    const statuses = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
        'won': '–í—ã–∏–≥—Ä–∞–ª–∞',
        'lost': '–ü—Ä–æ–∏–≥—Ä–∞–ª–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statuses[status] || status;
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease;
        max-width: 400px;
        word-wrap: break-word;
    `;
    
    // –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    const colors = {
        success: '#4caf50',
        error: '#f44336',
        warning: '#ff9800',
        info: '#2196f3'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideIn 0.3s ease reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 3000);
}

// ===== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ =====
function logout() {
    try {
        // –û—á–∏—Å—Ç–∏—Ç—å sync manager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.dataSyncManager) {
            window.dataSyncManager.cleanup();
            window.dataSyncManager.clearLocalData();
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å localStorage
        localStorage.removeItem('currentUser');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
        window.location.href = 'login.html';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
        window.location.href = 'login.html';
    }
}

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====
window.loadUserBetsHistory = loadUserBetsHistory;
window.applyFilters = applyFilters;
window.logout = logout;

// ===== –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï =====
// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
setInterval(() => {
    if (window.dataSyncManager && window.dataSyncManager.isUserOnline()) {
        loadUserBetsHistory();
    }
}, 60000);
