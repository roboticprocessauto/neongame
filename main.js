// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô MAIN.JS –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ SYNC MANAGER =====

import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { 
    getDatabase, 
    ref as dbRef, 
    set as dbSet, 
    get as dbGet, 
    update as dbUpdate, 
    push as dbPush
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let app = null;
let database = null;
let currentUser = null;
let events = {};
let betSlip = [];
let settings = {
    maxBetAmount: 1000,
    defaultBalance: 5000,
    minBetAmount: 1,
    maxCoefficient: 50
};

// –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
const dailyRewards = [250, 500, 1000, 2000, 3000, 5000, 7000];

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
window.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è main.js');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        await initializeFirebase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await checkAuth();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadSettings();
        await loadEvents();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateDailyBonusButton();
        
        console.log('‚úÖ main.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ main.js:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message, 'error');
    }
});

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE =====
async function initializeFirebase() {
    try {
        if (!window.firebaseConfig) {
            throw new Error('Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        app = initializeApp(window.firebaseConfig);
        database = getDatabase(app);
        
        console.log('üî• Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
        throw error;
    }
}

// ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
async function checkAuth() {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    try {
        const savedUser = localStorage.getItem('currentUser');
        
        if (!savedUser) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ login');
            window.location.href = 'login.html';
            return;
        }
        
        currentUser = JSON.parse(savedUser);
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.username);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ Firebase
        const userRef = dbRef(database, `users/${currentUser.username}`);
        const snapshot = await dbGet(userRef);
        
        if (!snapshot.exists()) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            localStorage.removeItem('currentUser');
            window.location.href = 'login.html';
            return;
        }
        
        const firebaseData = snapshot.val();
        
        if (firebaseData.status !== 'active') {
            console.log('‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            localStorage.removeItem('currentUser');
            showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'error');
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 2000);
            return;
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        currentUser = {
            username: currentUser.username,
            ...firebaseData
        };
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUserInfo();
        showRoleSpecificLinks();
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message, 'error');
        
        // –û—á–∏—Å—Ç–∏—Ç—å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
        localStorage.removeItem('currentUser');
        setTimeout(() => {
            window.location.href = 'login.html';
        }, 3000);
    }
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê =====
function updateUserInfo() {
    if (!currentUser) return;
    
    const balanceElement = document.getElementById('user-balance');
    const usernameElement = document.getElementById('username');
    
    if (balanceElement) {
        balanceElement.textContent = `${currentUser.balance.toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    }
    
    if (usernameElement) {
        usernameElement.textContent = currentUser.username;
    }
    
    console.log('üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
}

function showRoleSpecificLinks() {
    if (!currentUser) return;
    
    const adminLink = document.getElementById("admin-link");
    const moderatorLink = document.getElementById("moderator-link");
    
    if (adminLink && currentUser.role === "admin") {
        adminLink.style.display = "block";
    }
    
    if (moderatorLink && (currentUser.role === "moderator" || currentUser.role === "admin")) {
        moderatorLink.style.display = "block";
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö =====
async function loadSettings() {
    try {
        const settingsRef = dbRef(database, 'settings');
        const snapshot = await dbGet(settingsRef);
        
        if (snapshot.exists()) {
            Object.assign(settings, snapshot.val());
        }
        
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 'warning');
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô =====
async function loadEvents() {
    try {
        console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        
        const eventsRef = dbRef(database, 'events');
        const snapshot = await dbGet(eventsRef);
        
        if (snapshot.exists()) {
            events = snapshot.val();
            console.log('üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(events).length);
        } else {
            console.log('üìÖ –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Å–æ–±—ã—Ç–∏—è');
            await createDemoEvents();
        }
        
        displayEvents();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ' + error.message, 'error');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
        const container = document.getElementById('events-container');
        if (container) {
            container.innerHTML = `
                <div class="bet-slip-empty">
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π</p>
                    <button class="btn" onclick="loadEvents()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }
}

async function createDemoEvents() {
    const demoEvents = {
        'demo1': {
            title: '–í—ã–±–æ—Ä—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –°–®–ê 2028',
            description: '–ö—Ç–æ —Å—Ç–∞–Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –®—Ç–∞—Ç–æ–≤ –ê–º–µ—Ä–∏–∫–∏?',
            category: 'politics',
            options: ['–î–µ–º–æ–∫—Ä–∞—Ç—ã', '–†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Ü—ã', '–¢—Ä–µ—Ç—å—è –ø–∞—Ä—Ç–∏—è'],
            coefficients: [1.8, 2.1, 8.5],
            status: 'active',
            createdAt: Date.now()
        },
        'demo2': {
            title: 'Bitcoin –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç $100,000',
            description: '–î–æ—Å—Ç–∏–≥–Ω–µ—Ç –ª–∏ –∫—É—Ä—Å Bitcoin –æ—Ç–º–µ—Ç–∫–∏ –≤ $100,000 –¥–æ –∫–æ–Ω—Ü–∞ 2025 –≥–æ–¥–∞?',
            category: 'economics',
            options: ['–î–∞', '–ù–µ—Ç'],
            coefficients: [2.5, 1.4],
            status: 'active',
            createdAt: Date.now()
        },
        'demo3': {
            title: '–ù–æ–≤—ã–π iPhone –≤ 2025',
            description: '–ö–∞–∫–∞—è –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ iPhone –≤ 2025 –≥–æ–¥—É?',
            category: 'technology',
            options: ['–°–∫–ª–∞–¥–Ω–æ–π —ç–∫—Ä–∞–Ω', 'Holographic –¥–∏—Å–ø–ª–µ–π', '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI —á–∏–ø'],
            coefficients: [3.2, 7.5, 2.8],
            status: 'active',
            createdAt: Date.now()
        }
    };

    try {
        const eventsRef = dbRef(database, 'events');
        await dbSet(eventsRef, demoEvents);
        events = demoEvents;
        console.log('‚úÖ –î–µ–º–æ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Å–æ–±—ã—Ç–∏–π:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–µ–º–æ —Å–æ–±—ã—Ç–∏—è
        events = demoEvents;
    }
}

function displayEvents(filter = 'all') {
    const container = document.getElementById('events-container');
    if (!container) return;
    
    container.innerHTML = '';

    const filteredEvents = Object.entries(events).filter(([id, event]) => {
        return event.status === 'active' && (filter === 'all' || event.category === filter);
    });

    if (filteredEvents.length === 0) {
        container.innerHTML = '<div class="bet-slip-empty"><p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p></div>';
        return;
    }

    filteredEvents.forEach(([eventId, event]) => {
        const eventElement = document.createElement('div');
        eventElement.className = 'event-card';
        eventElement.innerHTML = `
            <div class="event-header">
                <div>
                    <div class="event-title">${event.title}</div>
                </div>
                <div class="event-category">${getCategoryName(event.category)}</div>
            </div>
            <div class="event-description">${event.description}</div>
            <div class="event-options">
                ${event.options.map((option, index) => `
                    <button class="option-btn" onclick="selectOption('${eventId}', '${option}', ${event.coefficients[index]})">
                        <span class="option-text">${option}</span>
                        <span class="option-coefficient">${event.coefficients[index]}</span>
                    </button>
                `).join('')}
            </div>
        `;
        container.appendChild(eventElement);
    });
    
    console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${filteredEvents.length} —Å–æ–±—ã—Ç–∏–π`);
}

function getCategoryName(category) {
    const categories = {
        'politics': 'üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞',
        'entertainment': 'üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 
        'technology': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'economics': 'üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞',
        'weather': 'üå§Ô∏è –ü–æ–≥–æ–¥–∞',
        'society': 'üë• –û–±—â–µ—Å—Ç–≤–æ'
    };
    return categories[category] || category;
}

// ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô =====
function filterEvents(category) {
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    displayEvents(category);
}

// ===== –ö–û–†–ó–ò–ù–ê –°–¢–ê–í–û–ö =====
function selectOption(eventId, option, coefficient) {
    if (!currentUser) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫', 'error');
        return;
    }

    const event = events[eventId];
    if (!event) return;

    const existingIndex = betSlip.findIndex(item => item.eventId === eventId);
    
    if (existingIndex !== -1) {
        betSlip[existingIndex] = {
            eventId: eventId,
            eventTitle: event.title,
            option: option,
            coefficient: coefficient
        };
    } else {
        betSlip.push({
            eventId: eventId,
            eventTitle: event.title,
            option: option,
            coefficient: coefficient
        });
    }

    updateBetSlipDisplay();
    showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å—Ç–∞–≤–æ–∫', 'success');
}

function updateBetSlipDisplay() {
    const container = document.getElementById('bet-slip-content');
    if (!container) return;
    
    if (betSlip.length === 0) {
        container.innerHTML = `
            <div class="bet-slip-empty">
                <p>–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞</p>
                <small>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–∫–∏</small>
            </div>
        `;
        return;
    }

    const totalCoefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);

    container.innerHTML = `
        <div class="bet-slip-items">
            ${betSlip.map((bet, index) => `
                <div class="bet-slip-item">
                    <button class="btn-remove" onclick="removeFromBetSlip(${index})">√ó</button>
                    <div class="bet-slip-event">${bet.eventTitle}</div>
                    <div class="bet-slip-option">${bet.option} (${bet.coefficient})</div>
                </div>
            `).join('')}
        </div>
        
        <div class="bet-slip-total">
            <div>–û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</div>
            <div class="total-coefficient">${totalCoefficient.toFixed(2)}</div>
        </div>
        
        <div class="bet-slip-controls">
            <input type="number" 
                   class="bet-amount-input" 
                   id="bet-amount" 
                   placeholder="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏" 
                   min="${settings.minBetAmount}" 
                   max="${Math.min(currentUser.balance, currentUser.betLimit || settings.maxBetAmount)}"
                   oninput="updatePotentialWin()">
            
            <div id="potential-win" class="potential-win" style="display: none;"></div>
            
            ${betSlip.length === 1 ? 
                `<button class="btn" onclick="placeBet('single')">–°–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é —Å—Ç–∞–≤–∫—É</button>` : 
                `<button class="btn" onclick="placeBet('express')">–°–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å —Å—Ç–∞–≤–∫—É</button>`
            }
            
            <button class="btn btn-secondary" onclick="clearBetSlip()">–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
        </div>
    `;
}

function removeFromBetSlip(index) {
    betSlip.splice(index, 1);
    updateBetSlipDisplay();
    showNotification('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'warning');
}

function clearBetSlip() {
    betSlip = [];
    updateBetSlipDisplay();
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'warning');
}

function updatePotentialWin() {
    const amount = parseFloat(document.getElementById('bet-amount').value) || 0;
    const totalCoefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);
    const potentialWin = amount * totalCoefficient;
    
    const potentialWinDiv = document.getElementById('potential-win');
    if (amount > 0) {
        potentialWinDiv.style.display = 'block';
        potentialWinDiv.textContent = `–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${potentialWin.toFixed(2)} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    } else {
        potentialWinDiv.style.display = 'none';
    }
}

// ===== –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–ê–í–û–ö =====
async function placeBet(type) {
    if (!currentUser) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        return;
    }

    if (betSlip.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞', 'error');
        return;
    }

    const amount = parseInt(document.getElementById('bet-amount').value);

    if (!amount || amount < settings.minBetAmount) {
        showNotification(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${settings.minBetAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'error');
        return;
    }

    if (amount > currentUser.balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }

    if (amount > (currentUser.betLimit || settings.maxBetAmount)) {
        showNotification(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: ${currentUser.betLimit || settings.maxBetAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'error');
        return;
    }

    try {
        let coefficient;
        let eventList;

        if (type === 'single' && betSlip.length === 1) {
            coefficient = betSlip[0].coefficient;
            eventList = betSlip;
        } else if (type === 'express' && betSlip.length > 1) {
            coefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);
            eventList = betSlip;
        } else {
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }

        // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const betsRef = dbRef(database, 'bets');
        const newBetRef = dbPush(betsRef);

        const bet = {
            user: currentUser.username,
            type: type,
            amount: amount,
            coefficient: parseFloat(coefficient.toFixed(2)),
            status: 'pending',
            timestamp: Date.now(),
            events: eventList
        };

        await dbSet(newBetRef, bet);

        // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newBalance = currentUser.balance - amount;
        const userRef = dbRef(database, `users/${currentUser.username}`);
        await dbUpdate(userRef, { balance: newBalance });

        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        currentUser.balance = newBalance;
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        updateUserInfo();

        // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å—Ç–∞–≤–æ–∫
        betSlip = [];
        updateBetSlipDisplay();

        showNotification('–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: ' + error.message, 'error');
    }
}

// ===== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° =====
function updateDailyBonusButton() {
    const btn = document.getElementById('daily-bonus-btn');
    if (!btn || !currentUser) return;
    
    const today = new Date().toISOString().split('T')[0];
    if (currentUser.lastBonusDate === today) {
        btn.disabled = true;
        btn.textContent = '–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω';
    } else {
        const reward = dailyRewards[getNextBonusIndex()];
        btn.disabled = false;
        btn.textContent = `–ü–æ–ª—É—á–∏—Ç—å ${reward} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    }
}

function getNextBonusIndex() {
    if (!currentUser) return 0;
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const yesterday = new Date();
    yesterday.setDate(today.getDate() - 1);
    const yestStr = yesterday.toISOString().split('T')[0];

    if (currentUser.lastBonusDate === todayStr) {
        return ((currentUser.bonusDay || 1) - 1) % 7;
    }

    if (currentUser.lastBonusDate === yestStr) {
        return (currentUser.bonusDay || 0) % 7;
    }

    return 0;
}

function openDailyBonusModal() {
    generateBonusCalendar();
    const modal = document.getElementById('dailyBonusModal');
    if (modal) modal.style.display = 'block';
}

function closeDailyBonusModal() {
    const modal = document.getElementById('dailyBonusModal');
    if (modal) modal.style.display = 'none';
}

function generateBonusCalendar() {
    const calendar = document.getElementById('bonus-calendar');
    if (!calendar) return;
    calendar.innerHTML = '';

    const nextIndex = getNextBonusIndex();
    const claimed = hasClaimedToday();

    for (let i = 0; i < dailyRewards.length; i++) {
        const dayButton = document.createElement('button');
        dayButton.className = 'calendar-day';
        const reward = dailyRewards[i];
        dayButton.textContent = `${i + 1}\n${reward} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;

        if (i === nextIndex && !claimed) {
            dayButton.classList.add('today');
            dayButton.onclick = claimDailyBonus;
        } else {
            dayButton.disabled = true;
        }

        calendar.appendChild(dayButton);
    }
}

function hasClaimedToday() {
    if (!currentUser) return false;
    const today = new Date().toISOString().split('T')[0];
    return currentUser.lastBonusDate === today;
}

async function claimDailyBonus() {
    if (!currentUser) return;
    const today = new Date().toISOString().split('T')[0];
    if (currentUser.lastBonusDate === today) {
        showNotification('–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è', 'error');
        return;
    }

    const yesterday = new Date();
    yesterday.setDate(new Date().getDate() - 1);
    const yestStr = yesterday.toISOString().split('T')[0];

    let nextIndex;
    if (currentUser.lastBonusDate === yestStr) {
        nextIndex = (currentUser.bonusDay || 0) % 7;
    } else {
        nextIndex = 0;
    }

    const reward = dailyRewards[nextIndex];

    try {
        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRef = dbRef(database, `users/${currentUser.username}`);
        await dbUpdate(userRef, {
            balance: currentUser.balance + reward,
            bonusDay: nextIndex + 1,
            lastBonusDate: today
        });

        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        currentUser.balance += reward;
        currentUser.bonusDay = nextIndex + 1;
        currentUser.lastBonusDate = today;
        localStorage.setItem('currentUser', JSON.stringify(currentUser));

        updateUserInfo();
        updateDailyBonusButton();
        closeDailyBonusModal();
        showNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${reward} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`, 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å: ' + error.message, 'error');
    }
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease;
        max-width: 400px;
        word-wrap: break-word;
    `;
    
    // –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    const colors = {
        success: '#4caf50',
        error: '#f44336',
        warning: '#ff9800',
        info: '#2196f3'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideIn 0.3s ease reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 4000);
}

// ===== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ =====
function logout() {
    try {
        localStorage.removeItem('currentUser');
        window.location.href = 'login.html';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
        window.location.href = 'login.html';
    }
}

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====
window.filterEvents = filterEvents;
window.selectOption = selectOption;
window.removeFromBetSlip = removeFromBetSlip;
window.clearBetSlip = clearBetSlip;
window.updatePotentialWin = updatePotentialWin;
window.placeBet = placeBet;
window.logout = logout;
window.openDailyBonusModal = openDailyBonusModal;
window.closeDailyBonusModal = closeDailyBonusModal;
window.loadEvents = loadEvents;

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====
window.addEventListener('error', function(event) {
    console.error('üö® JavaScript –æ—à–∏–±–∫–∞ –≤ main.js:', event.error);
    console.error('üìç –§–∞–π–ª:', event.filename, '–°—Ç—Ä–æ–∫–∞:', event.lineno);
});

window.addEventListener('unhandledrejection', function(event) {
    console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è Promise –æ—à–∏–±–∫–∞:', event.reason);
    event.preventDefault();
});
