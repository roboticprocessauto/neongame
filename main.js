// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE =====
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { 
    getDatabase, 
    ref as dbRef, 
    set as dbSet, 
    get as dbGet, 
    update as dbUpdate, 
    push as dbPush
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(window.firebaseConfig);
const database = getDatabase(app);

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let events = {};
let betSlip = [];
let settings = {
    maxBetAmount: 1000,
    defaultBalance: 5000,
    minBetAmount: 1,
    maxCoefficient: 50
};

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
window.addEventListener('DOMContentLoaded', function() {
    checkAuth();
    loadSettings();
    loadEvents();
});

function checkAuth() {
    const savedUser = localStorage.getItem('currentUser');
    if (!savedUser) {
        window.location.href = 'login.html';
        return;
    }
    
    currentUser = JSON.parse(savedUser);
    updateUserInfo();
    ensureDailyBonus();

    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    if (currentUser.role === 'admin' || currentUser.role === 'moderator') {
        document.getElementById('admin-link').style.display = 'block';
    }
}

function updateUserInfo() {
    if (!currentUser) return;

    document.getElementById('user-balance').textContent = `${currentUser.balance.toLocaleString()} –º–æ–Ω–µ—Ç`;
    document.getElementById('username').textContent = currentUser.username;

    const btn = document.getElementById('dailyBonusBtn');
    if (btn) {
        btn.disabled = hasClaimedToday();
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö =====
async function loadSettings() {
    try {
        const settingsRef = dbRef(database, 'settings');
        const snapshot = await dbGet(settingsRef);
        
        if (snapshot.exists()) {
            Object.assign(settings, snapshot.val());
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô =====
async function loadEvents() {
    try {
        const eventsRef = dbRef(database, 'events');
        const snapshot = await dbGet(eventsRef);
        
        if (snapshot.exists()) {
            events = snapshot.val();
        } else {
            // –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await createDemoEvents();
        }
        
        displayEvents();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    }
}

async function createDemoEvents() {
    const demoEvents = {
        'demo1': {
            title: '–í—ã–±–æ—Ä—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –°–®–ê 2028',
            description: '–ö—Ç–æ —Å—Ç–∞–Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –®—Ç–∞—Ç–æ–≤ –ê–º–µ—Ä–∏–∫–∏?',
            category: 'politics',
            options: ['–î–µ–º–æ–∫—Ä–∞—Ç—ã', '–†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Ü—ã', '–¢—Ä–µ—Ç—å—è –ø–∞—Ä—Ç–∏—è'],
            coefficients: [1.8, 2.1, 8.5],
            status: 'active',
            createdAt: Date.now()
        },
        'demo2': {
            title: 'Bitcoin –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç $100,000',
            description: '–î–æ—Å—Ç–∏–≥–Ω–µ—Ç –ª–∏ –∫—É—Ä—Å Bitcoin –æ—Ç–º–µ—Ç–∫–∏ –≤ $100,000 –¥–æ –∫–æ–Ω—Ü–∞ 2025 –≥–æ–¥–∞?',
            category: 'economics',
            options: ['–î–∞', '–ù–µ—Ç'],
            coefficients: [2.5, 1.4],
            status: 'active',
            createdAt: Date.now()
        },
        'demo3': {
            title: '–ù–æ–≤—ã–π iPhone –≤ 2025',
            description: '–ö–∞–∫–∞—è –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ iPhone –≤ 2025 –≥–æ–¥—É?',
            category: 'technology',
            options: ['–°–∫–ª–∞–¥–Ω–æ–π —ç–∫—Ä–∞–Ω', 'Holographic –¥–∏—Å–ø–ª–µ–π', '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI —á–∏–ø'],
            coefficients: [3.2, 7.5, 2.8],
            status: 'active',
            createdAt: Date.now()
        }
    };

    try {
        const eventsRef = dbRef(database, 'events');
        await dbSet(eventsRef, demoEvents);
        events = demoEvents;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Å–æ–±—ã—Ç–∏–π:', error);
    }
}

function displayEvents(filter = 'all') {
    const container = document.getElementById('events-container');
    container.innerHTML = '';

    const filteredEvents = Object.entries(events).filter(([id, event]) => {
        return event.status === 'active' && (filter === 'all' || event.category === filter);
    });

    if (filteredEvents.length === 0) {
        container.innerHTML = '<div class="bet-slip-empty"><p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p></div>';
        return;
    }

    filteredEvents.forEach(([eventId, event]) => {
        const eventElement = document.createElement('div');
        eventElement.className = 'event-card';
        eventElement.innerHTML = `
            <div class="event-header">
                <div>
                    <div class="event-title">${event.title}</div>
                </div>
                <div class="event-category">${getCategoryName(event.category)}</div>
            </div>
            <div class="event-description">${event.description}</div>
            <div class="event-options">
                ${event.options.map((option, index) => `
                    <button class="option-btn" onclick="selectOption('${eventId}', '${option}', ${event.coefficients[index]})">
                        <span class="option-text">${option}</span>
                        <span class="option-coefficient">${event.coefficients[index]}</span>
                    </button>
                `).join('')}
            </div>
        `;
        container.appendChild(eventElement);
    });
}

function getCategoryName(category) {
    const categories = {
        'politics': 'üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞',
        'entertainment': 'üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 
        'technology': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        'economics': 'üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞',
        'weather': 'üå§Ô∏è –ü–æ–≥–æ–¥–∞',
        'society': 'üë• –û–±—â–µ—Å—Ç–≤–æ'
    };
    return categories[category] || category;
}

// ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô =====
function filterEvents(category) {
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    displayEvents(category);
};

// ===== –ö–û–†–ó–ò–ù–ê –°–¢–ê–í–û–ö =====
function selectOption(eventId, option, coefficient) {
    if (!currentUser) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫', 'error');
        return;
    }

    const event = events[eventId];
    if (!event) return;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Å—Ç–∞–≤–∫–∞ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
    const existingIndex = betSlip.findIndex(item => item.eventId === eventId);
    
    if (existingIndex !== -1) {
        // –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–≤–∫—É
        betSlip[existingIndex] = {
            eventId: eventId,
            eventTitle: event.title,
            option: option,
            coefficient: coefficient
        };
    } else {
        // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        betSlip.push({
            eventId: eventId,
            eventTitle: event.title,
            option: option,
            coefficient: coefficient
        });
    }

    updateBetSlipDisplay();
    showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å—Ç–∞–≤–æ–∫', 'success');
};

function updateBetSlipDisplay() {
    const container = document.getElementById('bet-slip-content');
    
    if (betSlip.length === 0) {
        container.innerHTML = `
            <div class="bet-slip-empty">
                <p>–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞</p>
                <small>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–∫–∏</small>
            </div>
        `;
        return;
    }

    const totalCoefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);

    container.innerHTML = `
        <div class="bet-slip-items">
            ${betSlip.map((bet, index) => `
                <div class="bet-slip-item">
                    <button class="btn-remove" onclick="removeFromBetSlip(${index})">√ó</button>
                    <div class="bet-slip-event">${bet.eventTitle}</div>
                    <div class="bet-slip-option">${bet.option} (${bet.coefficient})</div>
                </div>
            `).join('')}
        </div>
        
        <div class="bet-slip-total">
            <div>–û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</div>
            <div class="total-coefficient">${totalCoefficient.toFixed(2)}</div>
        </div>
        
        <div class="bet-slip-controls">
            <input type="number" 
                   class="bet-amount-input" 
                   id="bet-amount" 
                   placeholder="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏" 
                   min="${settings.minBetAmount}" 
                   max="${Math.min(currentUser.balance, currentUser.betLimit || settings.maxBetAmount)}"
                   oninput="updatePotentialWin()">
            
            <div id="potential-win" class="potential-win" style="display: none;"></div>
            
            ${betSlip.length === 1 ? 
                `<button class="btn" onclick="placeBet('single')">–°–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é —Å—Ç–∞–≤–∫—É</button>` : 
                `<button class="btn" onclick="placeBet('express')">–°–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å —Å—Ç–∞–≤–∫—É</button>`
            }
            
            <button class="btn btn-secondary" onclick="clearBetSlip()">–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
        </div>
    `;
}

function removeFromBetSlip(index) {
    betSlip.splice(index, 1);
    updateBetSlipDisplay();
    showNotification('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'warning');
};

function clearBetSlip() {
    betSlip = [];
    updateBetSlipDisplay();
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'warning');
};

function updatePotentialWin() {
    const amount = parseFloat(document.getElementById('bet-amount').value) || 0;
    const totalCoefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);
    const potentialWin = amount * totalCoefficient;
    
    const potentialWinDiv = document.getElementById('potential-win');
    if (amount > 0) {
        potentialWinDiv.style.display = 'block';
        potentialWinDiv.textContent = `–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${potentialWin.toFixed(2)} –º–æ–Ω–µ—Ç`;
    } else {
        potentialWinDiv.style.display = 'none';
    }
};

// ===== –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–ê–í–û–ö =====
async function placeBet(type) {
    if (!currentUser) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        return;
    }

    if (betSlip.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞', 'error');
        return;
    }

    const amount = parseInt(document.getElementById('bet-amount').value);

    if (!amount || amount < settings.minBetAmount) {
        showNotification(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${settings.minBetAmount} –º–æ–Ω–µ—Ç`, 'error');
        return;
    }

    if (amount > currentUser.balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }

    if (amount > (currentUser.betLimit || settings.maxBetAmount)) {
        showNotification(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: ${currentUser.betLimit || settings.maxBetAmount} –º–æ–Ω–µ—Ç`, 'error');
        return;
    }

    try {
        let coefficient;
        let eventList;

        if (type === 'single' && betSlip.length === 1) {
            coefficient = betSlip[0].coefficient;
            eventList = betSlip;
        } else if (type === 'express' && betSlip.length > 1) {
            coefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);
            eventList = betSlip;
        } else {
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }

        // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const betsRef = dbRef(database, 'bets');
        const newBetRef = dbPush(betsRef);

        const bet = {
            user: currentUser.username,
            type: type,
            amount: amount,
            coefficient: parseFloat(coefficient.toFixed(2)),
            status: 'pending',
            timestamp: Date.now(),
            events: eventList
        };

        await dbSet(newBetRef, bet);

        // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRef = dbRef(database, `users/${currentUser.username}`);
        const newBalance = currentUser.balance - amount;
        await dbUpdate(userRef, { balance: newBalance });

        currentUser.balance = newBalance;
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        updateUserInfo();

        // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å—Ç–∞–≤–æ–∫
        betSlip = [];
        updateBetSlipDisplay();

        showNotification('–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏', 'error');
    }
};

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideIn 0.3s ease reverse';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ===== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ =====
function logout() {
    localStorage.removeItem('currentUser');
    window.location.href = 'login.html';
}

// ===== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° =====
function ensureDailyBonus() {
    if (!currentUser.dailyBonus) {
        currentUser.dailyBonus = { lastClaim: 0, streak: 0 };
    }
    localStorage.setItem('currentUser', JSON.stringify(currentUser));
}

function hasClaimedToday() {
    if (!currentUser.dailyBonus) return false;
    const last = new Date(currentUser.dailyBonus.lastClaim);
    const now = new Date();
    return last.getFullYear() === now.getFullYear() &&
           last.getMonth() === now.getMonth() &&
           last.getDate() === now.getDate();
}

function openDailyBonusModal() {
    renderDailyBonusCalendar();
    const modal = document.getElementById('dailyBonusModal');
    if (modal) modal.style.display = 'block';
}

function closeDailyBonusModal() {
    const modal = document.getElementById('dailyBonusModal');
    if (modal) modal.style.display = 'none';
}

function renderDailyBonusCalendar() {
    const calendar = document.getElementById('dailyBonusCalendar');
    if (!calendar) return;

    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const days = new Date(year, month + 1, 0).getDate();

    calendar.innerHTML = '';
    for (let d = 1; d <= days; d++) {
        const dayEl = document.createElement('div');
        dayEl.className = 'calendar-day';
        dayEl.textContent = d;

        if (d === now.getDate()) {
            dayEl.classList.add('current-day');
            if (hasClaimedToday()) {
                dayEl.classList.add('claimed');
            } else {
                dayEl.classList.add('claimable');
                dayEl.addEventListener('click', claimDailyBonus);
            }
        } else if (d < now.getDate()) {
            dayEl.classList.add('claimed');
        } else {
            dayEl.classList.add('disabled');
        }

        calendar.appendChild(dayEl);
    }
}

async function claimDailyBonus() {
    if (hasClaimedToday()) {
        showNotification('–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è', 'warning');
        return;
    }

    const bonus = 250;
    const userRef = dbRef(database, `users/${currentUser.username}`);

    try {
        const newBalance = (currentUser.balance || 0) + bonus;
        let streak = (currentUser.dailyBonus?.streak || 0) + 1;
        if (streak > 7) streak = 1;

        await dbUpdate(userRef, {
            balance: newBalance,
            dailyBonus: { lastClaim: Date.now(), streak: streak }
        });

        currentUser.balance = newBalance;
        currentUser.dailyBonus = { lastClaim: Date.now(), streak: streak };
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        updateUserInfo();
        showNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${bonus} –º–æ–Ω–µ—Ç!`, 'success');
        renderDailyBonusCalendar();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.filterEvents = filterEvents;
window.selectOption = selectOption;
window.removeFromBetSlip = removeFromBetSlip;
window.clearBetSlip = clearBetSlip;
window.updatePotentialWin = updatePotentialWin;
window.placeBet = placeBet;
window.logout = logout;
window.openDailyBonusModal = openDailyBonusModal;
window.closeDailyBonusModal = closeDailyBonusModal;
