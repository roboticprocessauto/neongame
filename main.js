// ===== MAIN.JS –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–µ—Ä—Å–∏—é Firebase
let database = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
function initializeFirebase() {
    if (!window.firebase) {
        throw new Error('Firebase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    const app = window.firebase.initializeApp(window.firebaseConfig);
    database = window.firebase.database();
    console.log('üî• Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.js');
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;
let events = {};
let betSlip = [];
let settings = {
    maxBetAmount: 1000,
    defaultBalance: 5000,
    minBetAmount: 1,
    maxCoefficient: 50
};

// –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
const dailyRewards = [250, 500, 1000, 2000, 3000, 5000, 7000];

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
window.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è main.js');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
        initializeFirebase();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ sync manager
        await waitForSyncManager();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await checkAuth();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadSettings();
        await loadEvents();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        setupSyncEventListeners();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateDailyBonusButton();
        
        console.log('‚úÖ main.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ main.js:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message, 'error');
        
        // Fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ sync manager
        await fallbackInitialization();
    }
});

// ===== –û–ñ–ò–î–ê–ù–ò–ï SYNC MANAGER =====
async function waitForSyncManager() {
    let attempts = 0;
    const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
    
    while (!window.dataSyncManager && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    if (!window.dataSyncManager) {
        console.warn('‚ö†Ô∏è DataSyncManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –≤ fallback —Ä–µ–∂–∏–º');
        throw new Error('DataSyncManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    console.log('‚úÖ DataSyncManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
}

// ===== FALLBACK –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
async function fallbackInitialization() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ sync manager');
    
    try {
        await checkAuthFallback();
        await loadSettings();
        await loadEvents();
        updateDailyBonusButton();
        
        console.log('‚úÖ Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
    }
}

// ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô =====
async function checkAuth() {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π');
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ sync manager
        let savedUser = window.dataSyncManager.getLocalUser();
        
        if (!savedUser) {
            savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                savedUser = JSON.parse(savedUser);
            }
        }
        
        if (!savedUser) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ login');
            window.location.href = 'login.html';
            return;
        }
        
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', savedUser.username);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ sync manager
        currentUser = await window.dataSyncManager.initializeUser(savedUser.username);
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUserInfo();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏
        showRoleSpecificLinks();
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        throw error;
    }
}

// ===== FALLBACK –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
async function checkAuthFallback() {
    console.log('üîê Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    try {
        const savedUser = localStorage.getItem('currentUser');
        
        if (!savedUser) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ login');
            window.location.href = 'login.html';
            return;
        }
        
        currentUser = JSON.parse(savedUser);
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.username);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ Firebase
        const userRef = database.ref(`users/${currentUser.username}`);
        const snapshot = await userRef.once('value');
        
        if (!snapshot.exists()) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            localStorage.removeItem('currentUser');
            window.location.href = 'login.html';
            return;
        }
        
        const firebaseData = snapshot.val();
        
        if (firebaseData.status !== 'active') {
            console.log('‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            localStorage.removeItem('currentUser');
            showNotification('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'error');
            setTimeout(() => window.location.href = 'login.html', 2000);
            return;
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        currentUser = {
            username: currentUser.username,
            ...firebaseData
        };
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        
        updateUserInfo();
        showRoleSpecificLinks();
        
        console.log('‚úÖ Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        throw error;
    }
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ê –°–õ–£–®–ê–¢–ï–õ–ï–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function setupSyncEventListeners() {
    if (!window.dataSyncManager) return;
    
    console.log('üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    
    window.addEventListener('dataSync', (event) => {
        const { type, data, timestamp } = event.detail;
        console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${type}`, data);
        
        switch (type) {
            case 'user_updated':
            case 'user_refreshed':
                handleUserDataUpdate(data);
                break;
                
            case 'user_updated_offline':
                handleOfflineUserUpdate(data);
                break;
                
            case 'events_updated':
                handleEventsUpdate(data);
                break;
                
            case 'settings_updated':
                handleSettingsUpdate(data);
                break;
                
            case 'connection_restored':
                handleConnectionRestored();
                break;
                
            case 'connection_lost':
                handleConnectionLost();
                break;
        }
    });
    
    // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    addSyncStatusIndicator();
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function handleUserDataUpdate(data) {
    if (data.user) {
        const oldBalance = currentUser ? currentUser.balance : 0;
        currentUser = data.user;
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUserInfo();
        updateDailyBonusButton();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (data.changes && data.changes.length > 0) {
            data.changes.forEach(change => {
                if (change.field === 'balance' && change.oldValue !== undefined) {
                    const diff = change.newValue - change.oldValue;
                    if (Math.abs(diff) > 0) {
                        showBalanceChangeNotification(diff);
                    }
                }
            });
        }
        
        console.log('üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

function handleOfflineUserUpdate(data) {
    if (data.user) {
        currentUser = data.user;
        updateUserInfo();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)', 'warning');
    }
}

function handleEventsUpdate(data) {
    events = data;
    displayEvents();
    console.log('üìÖ –°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
}

function handleSettingsUpdate(data) {
    Object.assign(settings, data);
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}

function handleConnectionRestored() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...', 'success');
    updateSyncStatus(true);
}

function handleConnectionLost() {
    showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º.', 'warning');
    updateSyncStatus(false);
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê =====
function updateUserInfo() {
    if (!currentUser) return;
    
    const balanceElement = document.getElementById('user-balance');
    const usernameElement = document.getElementById('username');
    
    if (balanceElement) {
        balanceElement.textContent = `${currentUser.balance.toLocaleString()} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    }
    
    if (usernameElement) {
        usernameElement.textContent = currentUser.username;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateSyncStatusIndicator();
}

function showRoleSpecificLinks() {
    if (!currentUser) return;
    
    const adminLink = document.getElementById("admin-link");
    const moderatorLink = document.getElementById("moderator-link");
    
    if (adminLink && currentUser.role === "admin") {
        adminLink.style.display = "block";
    }
    
    if (moderatorLink && (currentUser.role === "moderator" || currentUser.role === "admin")) {
        moderatorLink.style.display = "block";
    }
}

function updateSyncStatus(isOnline) {
    const statusIndicator = document.getElementById('sync-status');
    if (statusIndicator) {
        if (isOnline) {
            statusIndicator.innerHTML = 'üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
            statusIndicator.style.color = '#4caf50';
        } else {
            statusIndicator.innerHTML = 'üî¥ –û—Ñ–ª–∞–π–Ω';
            statusIndicator.style.color = '#f44336';
        }
    }
}

function updateSyncStatusIndicator() {
    const statusIndicator = document.getElementById('sync-status');
    if (statusIndicator && window.dataSyncManager) {
        const syncStatus = window.dataSyncManager.getSyncStatus();
        const pendingCount = syncStatus.pendingUpdates;
        
        if (!syncStatus.online) {
            statusIndicator.innerHTML = `üî¥ –û—Ñ–ª–∞–π–Ω${pendingCount > 0 ? ` (${pendingCount})` : ''}`;
            statusIndicator.style.color = '#f44336';
        } else if (syncStatus.syncInProgress) {
            statusIndicator.innerHTML = 'üü° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
            statusIndicator.style.color = '#ff9800';
        } else {
            statusIndicator.innerHTML = 'üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
            statusIndicator.style.color = '#4caf50';
        }
    }
}

// ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
function addSyncStatusIndicator() {
    const header = document.querySelector('.header .user-info');
    if (header && !document.getElementById('sync-status')) {
        const syncStatus = document.createElement('div');
        syncStatus.id = 'sync-status';
        syncStatus.style.cssText = `
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #4caf50;
            margin-left: 10px;
            padding: 2px 6px;
            border-radius: 12px;
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
        `;
        syncStatus.innerHTML = 'üü¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
        header.appendChild(syncStatus);
        
        console.log('üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω');
    }
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showBalanceChangeNotification(diff) {
    const message = diff > 0 
        ? `üí∞ –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${diff} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`
        : `üìâ –ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ ${Math.abs(diff)} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
        
    showNotification(message, diff > 0 ? 'success' : 'warning');
}

function showNotification(message, type = 'info') {
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease;
        max-width: 400px;
        word-wrap: break-word;
    `;
    
    // –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º
    const colors = {
        success: '#4caf50',
        error: '#f44336',
        warning: '#ff9800',
        info: '#2196f3'
    };
    
    notification.style.backgroundColor = colors[type] || colors.info;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideIn 0.3s ease reverse';
            setTimeout(() => notification.remove(), 300);
        }
    }, 4000);
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö =====
async function loadSettings() {
    try {
        const settingsRef = database.ref('settings');
        const snapshot = await settingsRef.once('value');
        
        if (snapshot.exists()) {
            Object.assign(settings, snapshot.val());
        }
        
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô =====
async function loadEvents() {
    try {
        console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
        const eventsRef = database.ref('events');
        const snapshot = await eventsRef.once('value');
        if (snapshot.exists()) {
            events = snapshot.val();
            console.log('üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(events).length);
        } else {
            events = {};
            console.log('üìÖ –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        displayEvents();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ' + error.message, 'error');
        // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É
        const container = document.getElementById('events-container');
        if (container) {
            container.innerHTML = `
                <div class="bet-slip-empty">
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π</p>
                    <button class="btn" onclick="loadEvents()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    }
}

// ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô =====
function filterEvents(category) {
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    displayEvents(category);
}

// ===== –ö–û–†–ó–ò–ù–ê –°–¢–ê–í–û–ö =====
function selectOption(eventId, option, coefficient) {
    if (!currentUser) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫', 'error');
        return;
    }

    const event = events[eventId];
    if (!event) return;

    const existingIndex = betSlip.findIndex(item => item.eventId === eventId);
    
    if (existingIndex !== -1) {
        betSlip[existingIndex] = {
            eventId: eventId,
            eventTitle: event.title,
            option: option,
            coefficient: coefficient
        };
    } else {
        betSlip.push({
            eventId: eventId,
            eventTitle: event.title,
            option: option,
            coefficient: coefficient
        });
    }

    updateBetSlipDisplay();
    showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å—Ç–∞–≤–æ–∫', 'success');
}

function updateBetSlipDisplay() {
    const container = document.getElementById('bet-slip-content');
    if (!container) return;
    
    if (betSlip.length === 0) {
        container.innerHTML = `
            <div class="bet-slip-empty">
                <p>–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞</p>
                <small>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞–≤–∫–∏</small>
            </div>
        `;
        return;
    }

    const totalCoefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);

    container.innerHTML = `
        <div class="bet-slip-items">
            ${betSlip.map((bet, index) => `
                <div class="bet-slip-item">
                    <button class="btn-remove" onclick="removeFromBetSlip(${index})">√ó</button>
                    <div class="bet-slip-event">${bet.eventTitle}</div>
                    <div class="bet-slip-option">${bet.option} (${bet.coefficient})</div>
                </div>
            `).join('')}
        </div>
        
        <div class="bet-slip-total">
            <div>–û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</div>
            <div class="total-coefficient">${totalCoefficient.toFixed(2)}</div>
        </div>
        
        <div class="bet-slip-controls">
            <input type="number" 
                   class="bet-amount-input" 
                   id="bet-amount" 
                   placeholder="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏" 
                   min="${settings.minBetAmount}" 
                   max="${Math.min(currentUser.balance, currentUser.betLimit || settings.maxBetAmount)}"
                   oninput="updatePotentialWin()">
            
            <div id="potential-win" class="potential-win" style="display: none;"></div>
            
            ${betSlip.length === 1 ? 
                `<button class="btn" onclick="placeBet('single')">–°–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω—É—é —Å—Ç–∞–≤–∫—É</button>` : 
                `<button class="btn" onclick="placeBet('express')">–°–¥–µ–ª–∞—Ç—å —ç–∫—Å–ø—Ä–µ—Å—Å —Å—Ç–∞–≤–∫—É</button>`
            }
            
            <button class="btn btn-secondary" onclick="clearBetSlip()">–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
        </div>
    `;
}

function removeFromBetSlip(index) {
    betSlip.splice(index, 1);
    updateBetSlipDisplay();
    showNotification('–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'warning');
}

function clearBetSlip() {
    betSlip = [];
    updateBetSlipDisplay();
    showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', 'warning');
}

function updatePotentialWin() {
    const amount = parseFloat(document.getElementById('bet-amount').value) || 0;
    const totalCoefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);
    const potentialWin = amount * totalCoefficient;
    
    const potentialWinDiv = document.getElementById('potential-win');
    if (amount > 0) {
        potentialWinDiv.style.display = 'block';
        potentialWinDiv.textContent = `–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: ${potentialWin.toFixed(2)} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    } else {
        potentialWinDiv.style.display = 'none';
    }
}

// ===== –†–ê–ó–ú–ï–©–ï–ù–ò–ï –°–¢–ê–í–û–ö –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô =====
async function placeBet(type) {
    if (!currentUser) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        return;
    }

    if (betSlip.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ —Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞', 'error');
        return;
    }

    const amount = parseInt(document.getElementById('bet-amount').value);

    if (!amount || amount < settings.minBetAmount) {
        showNotification(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${settings.minBetAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'error');
        return;
    }

    if (amount > currentUser.balance) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
        return;
    }

    if (amount > (currentUser.betLimit || settings.maxBetAmount)) {
        showNotification(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç–∞–≤–∫–∏: ${currentUser.betLimit || settings.maxBetAmount} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`, 'error');
        return;
    }

    try {
        let coefficient;
        let eventList;

        if (type === 'single' && betSlip.length === 1) {
            coefficient = betSlip[0].coefficient;
            eventList = betSlip;
        } else if (type === 'express' && betSlip.length > 1) {
            coefficient = betSlip.reduce((total, bet) => total * bet.coefficient, 1);
            eventList = betSlip;
        } else {
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏', 'error');
            return;
        }

        // –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const betsRef = database.ref('bets');
        const newBetRef = betsRef.push();

        const bet = {
            user: currentUser.username,
            type: type,
            amount: amount,
            coefficient: parseFloat(coefficient.toFixed(2)),
            status: 'pending',
            timestamp: Date.now(),
            events: eventList
        };

        await newBetRef.set(bet);

        // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ sync manager –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
        const newBalance = currentUser.balance - amount;
        
        if (window.dataSyncManager) {
            await window.dataSyncManager.updateUserData({ balance: newBalance });
        } else {
            // Fallback: –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                    const userRef = database.ref(`users/${currentUser.username}`);
        await userRef.update({ balance: newBalance });
            
            currentUser.balance = newBalance;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            updateUserInfo();
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å—Ç–∞–≤–æ–∫
        betSlip = [];
        updateBetSlipDisplay();

        showNotification('–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: ' + error.message, 'error');
    }
}

// ===== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° =====
function updateDailyBonusButton() {
    const btn = document.getElementById('daily-bonus-btn');
    if (!btn || !currentUser) return;
    
    const today = new Date().toISOString().split('T')[0];
    if (currentUser.lastBonusDate === today) {
        btn.disabled = true;
        btn.textContent = '–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω';
    } else {
        const reward = dailyRewards[getNextBonusIndex()];
        btn.disabled = false;
        btn.textContent = `–ü–æ–ª—É—á–∏—Ç—å ${reward} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;
    }
}

function getNextBonusIndex() {
    if (!currentUser) return 0;
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    const yesterday = new Date();
    yesterday.setDate(today.getDate() - 1);
    const yestStr = yesterday.toISOString().split('T')[0];

    if (currentUser.lastBonusDate === todayStr) {
        return ((currentUser.bonusDay || 1) - 1) % 7;
    }

    if (currentUser.lastBonusDate === yestStr) {
        return (currentUser.bonusDay || 0) % 7;
    }

    return 0;
}

function openDailyBonusModal() {
    generateBonusCalendar();
    const modal = document.getElementById('dailyBonusModal');
    if (modal) modal.style.display = 'block';
}

function closeDailyBonusModal() {
    const modal = document.getElementById('dailyBonusModal');
    if (modal) modal.style.display = 'none';
}

function generateBonusCalendar() {
    const calendar = document.getElementById('bonus-calendar');
    if (!calendar) return;
    calendar.innerHTML = '';

    const nextIndex = getNextBonusIndex();
    const claimed = hasClaimedToday();

    for (let i = 0; i < dailyRewards.length; i++) {
        const dayButton = document.createElement('button');
        dayButton.className = 'calendar-day';
        const reward = dailyRewards[i];
        dayButton.textContent = `${i + 1}\n${reward} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤`;

        if (i === nextIndex && !claimed) {
            dayButton.classList.add('today');
            dayButton.onclick = claimDailyBonus;
        } else {
            dayButton.disabled = true;
        }

        calendar.appendChild(dayButton);
    }
}

function hasClaimedToday() {
    if (!currentUser) return false;
    const today = new Date().toISOString().split('T')[0];
    return currentUser.lastBonusDate === today;
}

async function claimDailyBonus() {
    if (!currentUser) return;
    const today = new Date().toISOString().split('T')[0];
    if (currentUser.lastBonusDate === today) {
        showNotification('–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è', 'error');
        return;
    }

    const yesterday = new Date();
    yesterday.setDate(new Date().getDate() - 1);
    const yestStr = yesterday.toISOString().split('T')[0];

    let nextIndex;
    if (currentUser.lastBonusDate === yestStr) {
        nextIndex = (currentUser.bonusDay || 0) % 7;
    } else {
        nextIndex = 0;
    }

    const reward = dailyRewards[nextIndex];

    try {
        // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ sync manager –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
        const updateData = {
            balance: currentUser.balance + reward,
            bonusDay: nextIndex + 1,
            lastBonusDate: today
        };
        
        if (window.dataSyncManager) {
            await window.dataSyncManager.updateUserData(updateData);
        } else {
            // Fallback: –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                    const userRef = database.ref(`users/${currentUser.username}`);
        await userRef.update(updateData);
            
            Object.assign(currentUser, updateData);
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
            updateUserInfo();
        }

        updateDailyBonusButton();
        closeDailyBonusModal();
        showNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${reward} –ª—É–ø–∞–Ω—á–∏–∫–æ–≤!`, 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', error);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å: ' + error.message, 'error');
    }
}

// ===== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ =====
function logout() {
    try {
        // –û—á–∏—Å—Ç–∏—Ç—å sync manager
        if (window.dataSyncManager) {
            window.dataSyncManager.cleanup();
            window.dataSyncManager.clearLocalData();
        }
        
        // –û—á–∏—Å—Ç–∏—Ç—å localStorage
        localStorage.removeItem('currentUser');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = 'login.html';
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
        window.location.href = 'login.html';
    }
}

// ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====
window.filterEvents = filterEvents;
window.selectOption = selectOption;
window.removeFromBetSlip = removeFromBetSlip;
window.clearBetSlip = clearBetSlip;
window.updatePotentialWin = updatePotentialWin;
window.placeBet = placeBet;
window.logout = logout;
window.openDailyBonusModal = openDailyBonusModal;
window.closeDailyBonusModal = closeDailyBonusModal;
window.loadEvents = loadEvents;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
window.testSync = function() {
    if (window.dataSyncManager) {
        console.log('üß™ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', window.dataSyncManager.getSyncStatus());
        console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.dataSyncManager.getCurrentUser());
    } else {
        console.log('‚ö†Ô∏è DataSyncManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
};

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö =====
window.addEventListener('error', function(event) {
    console.error('üö® JavaScript –æ—à–∏–±–∫–∞ –≤ main.js:', event.error);
    console.error('üìç –§–∞–π–ª:', event.filename, '–°—Ç—Ä–æ–∫–∞:', event.lineno);
});

window.addEventListener('unhandledrejection', function(event) {
    console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è Promise –æ—à–∏–±–∫–∞:', event.reason);
    event.preventDefault();
});
